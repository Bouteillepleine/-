name: Build OnePlus Kernels with SukiSU Ultra

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      op_model:
        description: 'Select the OnePlus kernels to build'
        required: true
        type: choice
        options:
          - ALL
          - android15-6.6
          - android14-6.1
          - android14-5.15
          - android13-5.15
          - android13-5.10
          - android12-5.10
          - OP13-CPH
          - OP13-PJZ
          - OP13r
          - OP13S
          - OP13T
          - OP12
          - OP12r
          - OP11
          - OP11r
          - OP10pro
          - OP10t
          - OP-Nord-5
          - OP-NORD-4
          - OP-NORD-4-CE
          - OP-NORD-CE4-LITE
          - OP-ACE-5-PRO
          - OP-ACE-5
          - OP-ACE-3-PRO
          - OP-ACE-3V
          - OP-ACE-2-PRO
          - OP-ACE-2
          - OP-OPEN
          - OP-PAD-3
          - OP-PAD-2-PRO
          - OP-PAD-2
          - OP-PAD-PRO
        default: ALL
      hook:
        description: 'Hook type (kprobe/manual/tracepoint)'
        required: false
        type: choice
        options:
          - kprobe
          - manual
          - tracepoint
        default: manual
      lsm:
        description: 'Enable Baseband Guard LSM'
        required: false
        type: boolean
        default: false
      enable_zram:
        description: 'Enable additional ZRAM algorithms'
        required: false
        type: boolean
        default: false
      optimize_level:
        description: "Compiler optimization level (O2/O3)"
        required: false
        type: choice
        options: [O2, O3]
        default: O2

jobs:
  set-op-model:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code (to access configs/)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            configs/
          sparse-checkout-cone-mode: false

      - name: Setup OnePlus Model
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          declare -a models=()
          while IFS= read -r -d '' file; do
            model=$(basename "$file" .json)
            models+=("$model")
          done < <(find configs/ -name "*.json" -print0)
        
          if [ ${#models[@]} -eq 0 ]; then
            echo "Error: No config files found in configs/ directory!"
            exit 1
          fi
        
          echo "[" > matrix.json
          for i in "${!models[@]}"; do
            model="${models[$i]}"
            file="configs/$model.json"
            if [ -f "$file" ]; then
              jq -r '.' "$file" >> matrix.json
              if [ $((i+1)) -lt ${#models[@]} ]; then
                echo "," >> matrix.json
              fi
            fi
          done
          echo "]" >> matrix.json
        
          input="${{ github.event.inputs.op_model }}"
          jq_filter="."
        
          if [[ "$input" == "ALL" ]]; then
            :
          elif [[ "$input" == android*-* ]]; then
            IFS='-' read -r av kv <<< "$input"
            jq_filter="map(select(.android_version == \"$av\" and .kernel_version == \"$kv\"))"
          else
            jq_filter="map(select(.model == \"$input\"))"
          fi
        
          filtered=$(jq -c "$jq_filter" matrix.json)
          wrapped=$(jq -n --argjson items "$filtered" '{ include: $items }')
        
          echo "matrix<<MATRIX_EOF" >> "$GITHUB_OUTPUT"
          echo "$wrapped" >> "$GITHUB_OUTPUT"
          echo "MATRIX_EOF" >> "$GITHUB_OUTPUT"

  build:
    name: build (${{ matrix.model }}, ${{ matrix.soc }}, ${{ matrix.branch }}, ${{ matrix.manifest }}, ${{ matrix.android_version }}, ${{ matrix.kernel_version }})
    needs: set-op-model
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-op-model.outputs.matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build Kernel
        id: build
        uses: ./.github/actions
        with:
          op_config_json: ${{ toJSON(matrix) }}
          ksu_meta: 'susfs-main/⚡Ultra⚡/'
          hook: ${{ inputs.hook }}
          lsm: ${{ inputs.lsm }}
          enable_zram: ${{ inputs.enable_zram }}
          optimize_level: ${{ inputs.optimize_level }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Build Summary
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Build Results for ${{ matrix.model }}
          
          - **Kernel Version**: ${{ steps.build.outputs.kernel_version }}
          - **SukiSU Version**: ${{ steps.build.outputs.sukisu_version }}
          - **SUSFS Version**: ${{ steps.build.outputs.susfs_version }}
          - **Image SHA256**: \`${{ steps.build.outputs.image_sha256 }}\`
          - **Warnings**: ${{ steps.build.outputs.warnings_count }}
          - **Package**: \`${{ steps.build.outputs.zip_name }}\`
          EOF

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ matrix.model }}-${{ matrix.android_version }}-${{ matrix.kernel_version }}
          path: |
            ${{ matrix.model }}/artifacts/*.zip
            ${{ matrix.model }}/artifacts/*.txt
          retention-days: 7
          if-no-files-found: error

  trigger-release:
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: '*TEST BUILD* OnePlus Kernels With SukiSU Ultra & SUSFS v1.5.12 *TEST BUILD*'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate and Create New Tag
        run: |
          BASE_TAG="v1.5.12-r0"
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="$BASE_TAG"
          else
            LATEST_TAG=$(printf "%s\n%s\n" "$LATEST_TAG" "$BASE_TAG" | sort -rV | head -n1)
          fi
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Generate Device List and Final Release Notes
        id: generate-notes
        run: |
          echo "=== Start building the release notes ==="
          cat << EOF > release_notes.md
          This release contains SukiSU Ultra and SUSFS v1.5.12
          
          Module: 
          -> https://github.com/sidex15/ksu_module_susfs  
          
          Official Manager:
          -> https://github.com/SukiSU-Ultra/SukiSU-Ultra  
          
          ### Built Devices
          
          | Model | Kernel Version |
          |-------|----------------|
          EOF
          
          find downloaded-artifacts -name "*.txt" -type f | sort | while read -r file; do
            if [ -f "$file" ]; then
              model=$(basename "$file" .txt)
              version=$(cat "$file" | tr -d '\n\r')
              printf "| %-12s | %-16s |\n" "$model" "$version" >> release_notes.md
            fi
          done
          
          cat << 'EOF' >> release_notes.md
          
          ### Features
          - [+] SukiSU Ultra Manager Support
          - [+] SUSFS v1.5.12
          - [+] Wireguard Support
          - [+] Magic Mount Support
          - [+] Ptrace message leak fix for kernels < 5.16
          - [+] Manual/Kprobe/Tracepoint Hooks Support
          - [+] CONFIG_TMPFS_XATTR Support [Mountify Support]
          - [+] BBR v1 Support
          - [+] HMBIRD scx support (6.6 kernels)
          - [+] Baseband Guard Support (BBG) (optional)
          - [+] Additional ZRAM algorithms (optional)
          - [+] IP Set Support
          EOF
          
          echo "--- Final Release Notes ---"
          cat release_notes.md

      - name: Create GitHub Release
        run: |
          gh release create "${{ env.NEW_TAG }}" \
            --repo "${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}" \
            --title "${{ env.RELEASE_NAME }}" \
            --notes-file release_notes.md \
            --prerelease

      - name: Upload Release Assets Dynamically
        run: |
          uploaded=0
          for file in ./downloaded-artifacts/*/*.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              if gh release upload "${{ env.NEW_TAG }}" "$file" --clobber; then
                ((uploaded++))
              else
                echo "⚠️ Failed to upload $file"
              fi
            fi
          done
          
          if [ $uploaded -eq 0 ]; then
            echo "::error::No ZIP files were uploaded!"
            exit 1
          fi
          
          echo "✅ Successfully uploaded $uploaded file(s)"
