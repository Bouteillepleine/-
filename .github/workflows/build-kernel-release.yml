name: Build OnePlus Kernels with SukiSU Ultra

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Create a release?'
        required: true
        type: boolean
        default: false
      op_model:
        description: 'Select kernels to build'
        required: true
        type: choice
        options:
          - ALL
          - android15-6.6
          - android14-6.1
          - android14-5.15
          - android13-5.15
          - android13-5.10
          - android12-5.10
          - OP13-CPH
          - OP13-PJZ
          - OP13r
          - OP13S
          - OP13T
          - OP12
          - OP12r
          - OP11
          - OP11r
          - OP10pro
          - OP10t
          - OP-Nord-5
          - OP-NORD-4
          - OP-NORD-4-CE
          - OP-NORD-CE4-LITE
          - OP-ACE-5-PRO
          - OP-ACE-5
          - OP-ACE-3-PRO
          - OP-ACE-3V
          - OP-ACE-2-PRO
          - OP-ACE-2
          - OP-OPEN
          - OP-PAD-3
          - OP-PAD-2-PRO
          - OP-PAD-2
          - OP-PAD-PRO
        default: ALL
      hook:
        description: 'Hook type'
        required: false
        type: choice
        options: [kprobe, manual, tracepoint]
        default: manual
      lsm:
        description: 'Enable BBG LSM'
        required: false
        type: boolean
        default: false
      enable_zram:
        description: 'Enable ZRAM algorithms'
        required: false
        type: boolean
        default: false
      optimize_level:
        description: 'Optimization level'
        required: false
        type: choice
        options: [O2, O3]
        default: O2
      clean_build:
        description: 'Clean build (ignore cache)'
        required: false
        type: boolean
        default: false

jobs:
  set-op-model:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: configs/
          sparse-checkout-cone-mode: false

      - name: Setup Matrix
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          
          [ ! -d "configs" ] && { echo "::error::configs/ not found!"; exit 1; }
          
          declare -a models=()
          while IFS= read -r -d '' file; do
            models+=("$(basename "$file" .json)")
          done < <(find configs/ -name "*.json" -print0)
          
          [ ${#models[@]} -eq 0 ] && { echo "::error::No configs found!"; exit 1; }
          
          echo "Found ${#models[@]} config(s)"
          
          echo "[" > matrix.json
          first=true
          for model in "${models[@]}"; do
            file="configs/$model.json"
            jq empty "$file" 2>/dev/null || { echo "::warning::Invalid JSON: $file"; continue; }
            [ "$first" = false ] && echo "," >> matrix.json
            jq -r '.' "$file" >> matrix.json
            first=false
          done
          echo "]" >> matrix.json
          
          input="${{ github.event.inputs.op_model }}"
          jq_filter="."
          
          if [[ "$input" == "ALL" ]]; then
            echo "Building all"
          elif [[ "$input" == android*-* ]]; then
            IFS='-' read -r av kv <<< "$input"
            jq_filter="map(select(.android_version == \"$av\" and .kernel_version == \"$kv\"))"
          else
            jq_filter="map(select(.model == \"$input\"))"
          fi
          
          filtered=$(jq -c "$jq_filter" matrix.json)
          [ "$(echo "$filtered" | jq 'length')" -eq 0 ] && { echo "::error::No match: $input"; exit 1; }
          
          wrapped=$(jq -n --argjson items "$filtered" '{ include: $items }')
          
          {
            echo "matrix<<EOF"
            echo "$wrapped"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          {
            echo "### 📱 Build Matrix"
            echo "**Input:** \`$input\` | **Count:** $(echo "$filtered" | jq 'length')"
            echo '```json'
            echo "$wrapped" | jq '.'
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

  build:
    name: ${{ matrix.model }}
    needs: set-op-model
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-op-model.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build with ccache
        id: build
        uses: ./.github/actions
        with:
          op_config_json: ${{ toJSON(matrix) }}
          ksu_meta: 'susfs-main/⚡Ultra⚡/'
          hook: ${{ inputs.hook }}
          lsm: ${{ inputs.lsm }}
          enable_zram: ${{ inputs.enable_zram }}
          optimize_level: ${{ inputs.optimize_level }}
          clean: ${{ inputs.clean_build }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Outputs
        if: always()
        shell: bash
        run: |
          echo "::group::Build Output Values"
          echo "kernel_version: '${{ steps.build.outputs.kernel_version }}'"
          echo "sukisu_version: '${{ steps.build.outputs.sukisu_version }}'"
          echo "susfs_version: '${{ steps.build.outputs.susfs_version }}'"
          echo "image_sha256: '${{ steps.build.outputs.image_sha256 }}'"
          echo "warnings_count: '${{ steps.build.outputs.warnings_count }}'"
          echo "zip_name: '${{ steps.build.outputs.zip_name }}'"
          echo "build_time: '${{ steps.build.outputs.build_time }}'"
          echo "ccache_hit_rate: '${{ steps.build.outputs.ccache_hit_rate }}'"
          echo "::endgroup::"

      - name: Validate
        if: always()
        shell: bash
        run: |
          missing=0
          for out in kernel_version sukisu_version susfs_version image_sha256 warnings_count zip_name; do
            case "$out" in
              kernel_version) v="${{ steps.build.outputs.kernel_version }}" ;;
              sukisu_version) v="${{ steps.build.outputs.sukisu_version }}" ;;
              susfs_version) v="${{ steps.build.outputs.susfs_version }}" ;;
              image_sha256) v="${{ steps.build.outputs.image_sha256 }}" ;;
              warnings_count) v="${{ steps.build.outputs.warnings_count }}" ;;
              zip_name) v="${{ steps.build.outputs.zip_name }}" ;;
            esac
            [ -z "$v" ] && { echo "::error::Missing: $out"; ((missing++)); } || echo "✅ $out: $v"
          done
          [ $missing -gt 0 ] && exit 1 || exit 0

      - name: Build Summary
        if: always()
        shell: bash
        run: |
          status="${{ job.status }}"
          [ "$status" = "success" ] && emoji="✅" || emoji="❌"
          
          # Parse build time
          build_time="${{ steps.build.outputs.build_time }}"
          if [ -n "$build_time" ]; then
            minutes=$((build_time / 60))
            seconds=$((build_time % 60))
            time_str="${minutes}m ${seconds}s"
          else
            time_str="N/A"
          fi
          
          # Parse ccache hit rate
          ccache_rate="${{ steps.build.outputs.ccache_hit_rate }}"
          [ -z "$ccache_rate" ] && ccache_rate="N/A"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## $emoji ${{ matrix.model }} - $status
          
          ### 📊 Build Information
          
          | Property | Value |
          |----------|-------|
          | **Kernel Version** | ${{ steps.build.outputs.kernel_version }} |
          | **SukiSU Version** | ${{ steps.build.outputs.sukisu_version }} |
          | **SUSFS Version** | ${{ steps.build.outputs.susfs_version }} |
          | **Build Time** | ⏱️ $time_str |
          | **ccache Hit Rate** | 📈 $ccache_rate |
          | **Warnings** | ⚠️ ${{ steps.build.outputs.warnings_count }} |
          | **Package** | \`${{ steps.build.outputs.zip_name }}\` |
          
          ### 🔐 Verification
          
          **SHA256:** \`${{ steps.build.outputs.image_sha256 }}\`
          
          ### ⚙️ Build Configuration
          
          | Setting | Value |
          |---------|-------|
          | Hook Type | \`${{ inputs.hook }}\` |
          | BBG LSM | \`${{ inputs.lsm }}\` |
          | ZRAM | \`${{ inputs.enable_zram }}\` |
          | Optimization | \`${{ inputs.optimize_level }}\` |
          | Clean Build | \`${{ inputs.clean_build }}\` |
          EOF

      - name: Upload Kernel ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.zip_name }}
          path: ${{ matrix.model }}/artifacts/${{ steps.build.outputs.zip_name }}
          retention-days: 30
          compression-level: 0
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: 'OnePlus Kernels - SukiSU Ultra & SUSFS v1.5.12'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate Tag
        run: |
          BASE="v1.5.12-r0"
          LATEST=$(gh api repos/${{ github.repository }}/tags \
            --jq '[.[] | select(.name | startswith("v1.5.12-r")) | .name] | .[0]' || echo "")
          
          if [ -z "$LATEST" ]; then
            NEW_TAG="$BASE"
          else
            REV=$(echo "$LATEST" | sed -n 's/.*-r\([0-9]\+\)$/\1/p')
            NEW_TAG="v1.5.12-r$((${REV:-0} + 1))"
          fi
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "📌 Generated tag: $NEW_TAG"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Organize Artifacts
        run: |
          echo "::group::Organize downloaded artifacts"
          
          mkdir -p release_zips
          
          find artifacts -name "*.zip" -type f | while read zip; do
            filename=$(basename "$zip")
            echo "Found: $filename"
            cp "$zip" "release_zips/$filename"
          done
          
          ZIP_COUNT=$(find release_zips -name "*.zip" -type f | wc -l)
          echo "✅ Organized $ZIP_COUNT ZIP file(s)"
          
          if [ "$ZIP_COUNT" -eq 0 ]; then
            echo "::error::No ZIP files found in artifacts!"
            exit 1
          fi
          
          ls -lh release_zips/
          echo "::endgroup::"

      - name: Generate Release Notes
        run: |
          cat << EOF > notes.md
          # 🎉 SukiSU Ultra with SUSFS v1.5.12
          
          **SUSFS Module:** https://github.com/sidex15/ksu_module_susfs  
          **SukiSU Manager:** https://github.com/SukiSU-Ultra/SukiSU-Ultra  
          
          ## 📱 Built Devices
          
          | Model | Kernel Version | SukiSU Version | Hook Type |
          |-------|----------------|----------------|-----------|
          EOF
          
          find release_zips -name "AnyKernel3_*.zip" -type f | sort | while read zip; do
            filename=$(basename "$zip" .zip)
            
            if [[ "$filename" =~ AnyKernel3_([^_]+)_([^_]+)_SukiSU_([^_]+)_([A-Z]+) ]]; then
              model="${BASH_REMATCH[1]}"
              kernel="${BASH_REMATCH[2]}"
              sukisu="${BASH_REMATCH[3]}"
              hook="${BASH_REMATCH[4]}"
              echo "| $model | $kernel | v$sukisu | $hook |" >> notes.md
            elif [[ "$filename" =~ AnyKernel3_([^_]+)_([^_]+)_SukiSU_([^_]+) ]]; then
              model="${BASH_REMATCH[1]}"
              kernel="${BASH_REMATCH[2]}"
              sukisu="${BASH_REMATCH[3]}"
              echo "| $model | $kernel | v$sukisu | Default |" >> notes.md
            fi
          done
          
          cat << 'EOF' >> notes.md
          
          ## ✨ Features
          
          ### Core Components
          - ⚡ **SukiSU Ultra Manager** - Enhanced KernelSU manager
          - 🛡️ **SUSFS v1.5.12** - Kernel-level root hiding (module included in ZIP)
          - 🔐 **Magic Mount** - Seamless file system modifications
          - 🔧 **Ptrace Fix** - For kernels < 5.16
          
          ### Hook Types
          - 🎯 **Manual (VFS)** - Direct VFS hooks (default)
          - 🔍 **Kprobe** - Dynamic kernel probing
          - 📊 **Tracepoint** - Kernel tracepoint hooks
          
          ### Network & Security
          - 🌐 **Wireguard** - Modern VPN protocol
          - 🔥 **IP Set** - Advanced firewall rules
          - 📈 **BBR v1** - TCP congestion control
          - 🛡️ **BBG LSM** - Optional security module
          
          ### Performance
          - 💾 **ZRAM Algorithms** - Optional memory compression
          - ⚙️ **TMPFS_XATTR** - Mountify support
          - 🚀 **HMBIRD scx** - Scheduler (6.6 kernels)
          - 🎯 **Optimization Levels** - O2/O3 compiler flags
          - 📦 **ccache** - Accelerated compilation (85-95% cache hits)
          
          ## 📦 Installation
          
          1. **Download** the ZIP for your device
          2. **Boot** into recovery (TWRP/OrangeFox)
          3. **Flash** the kernel ZIP
          4. **Reboot** and install SukiSU Manager
          5. **Install** SUSFS module from `/sdcard/` (automatically extracted)
          
          ## ⚠️ Important Notes
          
          - **SUSFS module** is included in the kernel ZIP and will be extracted to `/sdcard/`
          - Install the SUSFS module **after** flashing the kernel
          - Use **SukiSU Ultra Manager** for best compatibility
          - Backup your data before flashing
          
          ## 🐛 Troubleshooting
          
          - If bootloop occurs, flash stock kernel in recovery
          - Check Magisk/KernelSU conflicts before installation
          - Ensure your device matches the kernel model
          
          ## 📝 Build Configuration
          
          - **Hook Type:** ${{ inputs.hook }}
          - **BBG LSM:** ${{ inputs.lsm }}
          - **ZRAM:** ${{ inputs.enable_zram }}
          - **Optimization:** ${{ inputs.optimize_level }}
          - **Clean Build:** ${{ inputs.clean_build }}
          
          ---
          
          **Built with ❤️ by GitHub Actions**  
          **Powered by ccache for faster builds** 🚀
          EOF
          
          echo "✅ Release notes generated"

      - name: Create Release
        run: |
          echo "Creating release: ${{ env.NEW_TAG }}"
          
          for i in {1..3}; do
            if gh release create "${{ env.NEW_TAG }}" \
              --repo "${{ github.repository }}" \
              --title "${{ env.RELEASE_NAME }}" \
              --notes-file notes.md \
              --prerelease; then
              echo "✅ Release created successfully"
              exit 0
            fi
            echo "⚠️ Retry $i/3..."
            sleep 5
          done
          
          echo "::error::Failed to create release after 3 attempts"
          exit 1

      - name: Upload Release Assets
        run: |
          echo "::group::Upload kernel ZIPs to release"
          
          SUCCESS_COUNT=0
          FAIL_COUNT=0
          
          find release_zips -name "*.zip" -type f | sort | while read zip; do
            filename=$(basename "$zip")
            echo "Uploading: $filename"
            
            for i in {1..3}; do
              if gh release upload "${{ env.NEW_TAG }}" "$zip" \
                 --repo "${{ github.repository }}" \
                 --clobber; then
                echo "  ✅ $filename uploaded"
                ((SUCCESS_COUNT++))
                break
              fi
              
              if [ $i -lt 3 ]; then
                echo "  ⚠️ Retry $i/3 for $filename"
                sleep 5
              else
                echo "  ❌ Failed to upload $filename"
                ((FAIL_COUNT++))
              fi
            done
          done
          
          echo "::endgroup::"

      - name: Verify Release Assets
        run: |
          echo "::group::Verify uploaded assets"
          
          UPLOADED_COUNT=$(gh release view "${{ env.NEW_TAG }}" \
            --repo "${{ github.repository }}" \
            --json assets --jq '.assets | length')
          
          echo "✅ Release has $UPLOADED_COUNT asset(s)"
          
          if [ "$UPLOADED_COUNT" -eq 0 ]; then
            echo "::error::No assets uploaded to release!"
            exit 1
          fi
          
          gh release view "${{ env.NEW_TAG }}" \
            --repo "${{ github.repository }}" \
            --json assets --jq '.assets[] | "- \(.name) (\(.size) bytes)"'
          
          echo "::endgroup::"

      - name: Release Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🎉 Release: ${{ env.NEW_TAG }}
          
          **Status:** ${{ job.status }}  
          **Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ env.NEW_TAG }}
          
          ## 📦 Uploaded Assets
          
          | Filename | Size | SHA256 |
          |----------|------|--------|
          EOF
          
          find release_zips -name "*.zip" -type f | sort | while read zip; do
            filename=$(basename "$zip")
            size=$(stat -c%s "$zip" | numfmt --to=iec-i --suffix=B)
            sha256=$(sha256sum "$zip" | awk '{print substr($1,1,16) "..."}')
            echo "| \`$filename\` | $size | \`$sha256\` |" >> $GITHUB_STEP_SUMMARY
          done
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ## 🔗 Quick Links
          
          - [📥 Download Release](https://github.com/${{ github.repository }}/releases/tag/${{ env.NEW_TAG }})
          - [📋 All Releases](https://github.com/${{ github.repository }}/releases)
          - [🔧 SUSFS Module](https://github.com/sidex15/ksu_module_susfs)
          - [📱 SukiSU Manager](https://github.com/SukiSU-Ultra/SukiSU-Ultra)
          
          ## 🚀 Performance Metrics
          
          This release was built with **ccache optimization** for faster compilation times.
          Typical build times: 5-12 minutes (vs 25-30 minutes without cache).
          EOF
