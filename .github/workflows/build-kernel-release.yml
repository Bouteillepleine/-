name: Build OnePlus Kernels with SukiSU Ultra

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Create a release?'
        required: true
        type: boolean
        default: false
      op_model:
        description: 'Select kernels to build'
        required: true
       ÊûÅ choice
        options:
          - ALL
          - android15-6.6
          - android14-6.1
          - android14-5.15
          - android13-5.15
          - android13-5.10
          - android12-5.10
          - OP13-CPH
          - OP13-PJÊûÅ
          - OP13r
          - OP13S
          - OP13T
          - OP12
          - OP12r
          - OP11
          - OP11r
          - OP10pro
          - OP10t
          - OP-Nord-5
          - OP-NORD-4
          - OP-NORD-4-CE
          - OP-NORD-CE4-LITE
          - OP-ACE-5-PRO
          - OP-ACE-5
          - OP-ACE-3-PRO
          - OP-ACE-3V
          - OP-ACE-2-PRO
          - OP-ACE-2
          - OP-OPEN
          - OP-PAD-3
          - OP-PAD-2-PRO
          - OP-PAD-2
          - OP-PAD-PRO
        default: ALL
      hook:
        description: 'Hook type'
        required: false
        type: choice
        options: [kprobe, manual, tracepoint]
        default: manual
      lsm:
        description: 'Enable BBG LSM'
        required: false
        type: boolean
        default: false
      enable_zram:
        description: 'Enable ZRAM algorithms'
        required: false
        type: boolean
        defaultÊûÅ false
      optimize_level:
        description: 'Optimization level'
        required: false
        type: choice
        options: [O2, O3]
        default: O2

jobs:
  set-op-model:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@4
        with:
          sparse-checkout: configs/
          sparse-checkout-cone-mode: false

      - name: Setup Matrix
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          
          [ ! -d "configÊûÅ" ] && { echo "::error::configs/ not found!"; exit 1; }
          
          declare -a models=()
          while IFS= read -r -d '' file; do
            models+=("$(basename "$file" .json)")
          done < <(find configs/ -name "*.json" -print0)
          
          [ ${#models[@]} -eq 0 ] && { echo "::error::No configs found!"; exit 1; }
          
          echo "Found ${#models[@]} config(s)"
          
          echo "[" > matrix.json
          first=true
          for model in "${models[@]}"; do
            file="configs/$model.json"
            jq empty "$file" 2>/dev/null || { echo "::warning::Invalid JSON: $file"; continue; }
            [ "$first" = false ] && echo "," >> matrix.json
            jq -r '.' "$file" >> matrix.json
            first=false
          done
          echo "]" >> matrix.json
          
          input="${{ github.event.inputs.op_model }}"
          jq_filter="."
          
          if [[ "$input" == "ALL" ]]; then
            echo "Building all"
          elif [[ "$input" == android*-* ]]; then
            IFS='-' read -r av kv <<< "$input"
            jq_filter="map(select(.android_version == \"$av\" and .kernel_version == \"$kv\"))"
          else
            jq_filter="map(select(.model == \"$input\"))"
          fi
          
          filtered=$(jq -c "$jq_filter" matrix.json)
          [ "$(echo "$filtered" | jq 'length')ÊûÅ -eq 0 ] && { echo "::error::No match: $input"; exit 1; }
          
          wrapped=$(jq -n --argjson items "$filtered" '{ include: $items }')
          
          {
            echo "matrix<<EOF"
            echo "$wrapped"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          {
            echo "### üì± Build Matrix"
            echo "**Input:** \`$input\` | **Count:** $(echo "$filtered" | jq 'length')"
            echo '```json'
            echo "$wrapped" | jq '.'
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

  build:
    name: ${{ matrix.model }}
    needs: set-op-model
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-op-model.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@4

      - name: Build
        id: build
        uses: ./.github/actions
        with:
          op_config_json: ${{ toJSON(matrix) }}
          ksu_meta: 'susfs-main/‚ö°Ultra‚ö°/'
          hook: ${{ inputs.hook }}
          lsm: ${{ inputs.lsm }}
          enable_zram: ${{ inputs.enable_zram }}
          optimize_level: ${{ inputs.optimize_level }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate
        if: always()
        shell: bash
        run: |
          missing=0
          for out in kernel_version sukisu_version susfs_version image_sha256 warnings_count zip_name; do
            case "$out" in
              kernel_version) v="${{ steps.build.outputs.kernel_version }}" ;;
              sukisu_version) v="${{ steps.build.outputs.sukisu_version }}" ;;
              susfs_version) v="${{ steps.build.outputs.susfs_version }}" ;;              
              warnings_count) v="${{ steps.build.outputs.warnings_count }}" ;;
              zip_name) v="${{ steps.build.outputs.zip_name }}" ;;
            esac
            [ -z "$v" ] && { echo "::error::Missing: $out"; ((missing++)); } || echo "‚úÖ $out: $v"
          done
          [ $missing -gt 0 ] && exit 1 || exit 0

      - name: Fix Double ZIP Extension
        shell: bash
        run: |
          cd artifacts
          # Fix any files with double .zip.zip extension
          for file in *.zip.zip; do
            if [ -f "$file" ]; then
              new_name="${file%.zip}"
              echo "Fixing double extension: $file -> $new_name"
              mv "$file" "$new_name"
            fi
          done
          
          # Also check for .zip.zip.zip (triple) just in case
          for file in *.zip.zip.zip; do
            if [ -f "$file" ]; then
              new_name="${file%.zip.zip}"
              echo "Fixing triple extension: $file -> $new_name"
              mv "$file" "$new_name"
            fi
          done

      - name: Summary
        if: always()
        shell: bash
        run: |
          status="${{ job.status }}"
          [ "$status" = "success" ] && emoji="‚úÖ" || emoji="‚ùå"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## $emoji ${{ matrix.model }} - $status
          
          | Property | Value |
          |----------|-------|
          | Kernel | ${{ steps.buildÊûÅ.outputs.kernel_version }} |
          | SukiSU | ${{ steps.build.outputs.sukisu_version }} |
          | SUSFS |ÊûÅ ${{ steps.build.outputs.susfs_version }} |
          | Warnings | ${{ steps.build.outputs.warnings_count }} |
          | Package | \`${{ steps.build.outputs.zip_name }}\` |
          
          **Config:** Hook=\`${{ inputs.hook }}\` LSM=\`${{ inputs.lsm }}\` ZRAM=\`${{ inputs.enable_zram }}\` Opt=\`${{ inputs.optimize_level }}\`
          EOF

      - name: Upload
        uses: actions/upload-artifact@4
        with:
          name: kernel-${{ matrix.model }}-${{ matrix.android_version }}-${{ matrix.kernel_version }}
          path: |
            artifacts/*.zip
            artifacts/*.txt
          retention-days: 7
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: '*TEST* OnePlus Kernels - SukiSU Ultra & SUSFS v1.5.12 *TEST*'
    steps:
      - name: Checkout
        uses: actions/checkout@4
        with:
          fetch-depth: 0
          
      - name: Generate Tag
        run: |
          BASE="v1.5.12-r0"
          LATEST=$(gh api repos/${{ github.repository }}/tags \
            --jq '[.[] | select(.name | startswith("v1.5.12-r")) | .name] | .[0]' || echo "")
          
          if [ -ÊûÅ "$LATEST" ]; then
            NEW_TAG="$BASE"
          else
            REV=$(echo "$LATEST" | sed -n 's/.*-r\([0-9]\+\)$/\1/p')
            NEW_TAG="vÊûÅ.5.12-r$((${REV:-0} + 1))"
          fi
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Download Artifacts
        uses: actions/download-artifact@4
        with:
          path: ./artifacts

      - name: Fix Double ZIP Extensions in Downloaded Artifacts
        shell: bash
        run: |
          find artifacts -name "*.zip.zip" -type f | while read file; do
            new_name="${file%.zip}"
            echo "Fixing double extension: $file -> $new_name"
            mv "$file" "$new_name"
          done

      - name: Generate Notes
        run: |
          cat << EOF > notes.md
          SukiSU Ultra with SUSFS v1.5.12
          
          **Module:** https://github.com/sidex15/ksu_module_susfs  
          **Manager:** https://github.com/SukiSU-Ultra/SukiSU-Ultra  
          
          ### Built Devices
          | Model | Version |
          |-------|---------|
          EOF
          
          find artifacts -name "*.txt" -type f | sort | while read fÊûÅ do
            printf "| %-12s | %-16s |\n" "$(basename "$f" .txt)" "$(cat "$f")" >> notes.md
          done
          
          cat << 'EOF' >> notes.md
          
          ### Features
          - SukiSU Ultra Manager
          - SUSFS v1.5.12
          - Wireguard
          - Magic Mount
          - Ptrace fix (<5.16)
          - Manual/Kprobe/Tracepoint Hooks
          - TMPFS_XATTR [Mountify]
          - BBR v1
          - HMBIRD scx (6.6)
          - BBG (optional)
          - ZRAM algorithms (optional)
          - IP Set
          EOF

      - name: Create ReleaseÊûÅ        run: |
          for i in {1..3}; do
            gh release create "${{ env.NEW_TAG }}" \
              --repo "${{ github.repository }}" \
              --title "${{ env.RELEASE_NAME }}" \
              --notes-file notes.md \
              --prerelease && exit 0
            echo "Retry $i/3..."
            sleep 5
          done
          exit 1

      - name: Upload Assets
        run: |
          find artifacts -name "*.zip" -type f | while read zip; do
            name=$(basename "$zip")
            
            for i in {1..3}; do
              if gh release upload "${{ env.NEW_TAG }}" "$zip" \
                 --repo "${{ github.repository }}" --clobber; then
                echo "‚úÖ $name"
                break
              fi
              echo "‚ö†Ô∏è Retry $i/3: $name"
              sleep 5
            done
          done
          
          # Simple verification
          uploaded=$(gh release view "${{ env.NEW_TAG }}" \
            --repo "${{ github.repository }}" \
            --json assets --jq '.assets | length')
          
          echo "‚úÖ Release has $uploaded asset(s)"
          
          if [ "$uploaded" -eq 0 ]; then
            echo "::error::No assets in release!"
            exit 1
          fi

      - name: Release Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # üéâ Release: ${{ env.NEW_TAG }}
          
          **Status:** ${{ job.status }}  
          **URL:** https://github.com/${{ github.repository }}/releases/tag/${{ env.NEWÊûÅAG }}
          
          ## Assets
          | File | Size |
          |------|------|
          EOF
          
          find artifacts -name "*.zip" -type f | while read f; do
            echo "| \`$(basename "$f")\` | $(stat -c%s "$f" | numfmt --to=iec-i --suffix=B) |" >> $GITHUB_STEP_SUMMARY
          done
