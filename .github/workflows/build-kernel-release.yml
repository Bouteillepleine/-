name: Build OnePlus Kernels with SukiSU Ultra

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Create a release?'
        required: true
        type: boolean
        default: false
      op_model:
        description: 'Select kernels to build'
        required: true
        type: choice
        options:
          - ALL
          - android15-6.6
          - android14-6.1
          - android14-5.15
          - android13-5.15
          - android13-5.10
          - android12-5.10
          - OP13-CPH
          - OP13-PJZ
          - OP13r
          - OP13S
          - OP13T
          - OP12
          - OP12r
          - OP11
          - OP11r
          - OP10pro
          - OP10t
          - OP-Nord-5
          - OP-NORD-4
          - OP-NORD-4-CE
          - OP-NORD-CE4-LITE
          - OP-ACE-5-PRO
          - OP-ACE-5
          - OP-ACE-3-PRO
          - OP-ACE-3V
          - OP-ACE-2-PRO
          - OP-ACE-2
          - OP-OPEN
          - OP-PAD-3
          - OP-PAD-2-PRO
          - OP-PAD-2
          - OP-PAD-PRO
        default: ALL
      hook:
        description: 'Hook type'
        required: false
        type: choice
        options: [kprobe, manual, tracepoint]
        default: manual
      lsm:
        description: 'Enable BBG LSM'
        required: false
        type: boolean
        default: false
      enable_zram:
        description: 'Enable ZRAM algorithms'
        required: false
        type: boolean
        default: false
      optimize_level:
        description: 'Optimization level'
        required: false
        type: choice
        options: [O2, O3]
        default: O2

concurrency:
  group: build-${{ github.workflow }}-${{ github.event.inputs.op_model }}
  cancel-in-progress: true

jobs:
  set-op-model:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: configs/
          sparse-checkout-cone-mode: false

      - name: Setup Matrix
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          
          [ ! -d "configs" ] && { echo "::error::configs/ not found!"; exit 1; }
          
          declare -a models=()
          while IFS= read -r -d '' file; do
            models+=("$(basename "$file" .json)")
          done < <(find configs/ -name "*.json" -print0)
          
          [ ${#models[@]} -eq 0 ] && { echo "::error::No configs found!"; exit 1; }
          
          echo "Found ${#models[@]} config(s)"
          
          echo "[" > matrix.json
          first=true
          for model in "${models[@]}"; do
            file="configs/$model.json"
            jq empty "$file" 2>/dev/null || { echo "::warning::Invalid JSON: $file"; continue; }
            [ "$first" = false ] && echo "," >> matrix.json
            jq -r '.' "$file" >> matrix.json
            first=false
          done
          echo "]" >> matrix.json
          
          input="${{ github.event.inputs.op_model }}"
          jq_filter="."
          
          if [[ "$input" == "ALL" ]]; then
            echo "Building all"
          elif [[ "$input" == android*-* ]]; then
            IFS='-' read -r av kv <<< "$input"
            jq_filter="map(select(.android_version == \"$av\" and .kernel_version == \"$kv\"))"
          else
            jq_filter="map(select(.model == \"$input\"))"
          fi
          
          filtered=$(jq -c "$jq_filter" matrix.json)
          [ "$(echo "$filtered" | jq 'length')" -eq 0 ] && { echo "::error::No match: $input"; exit 1; }
          
          wrapped=$(jq -n --argjson items "$filtered" '{ include: $items }')
          
          {
            echo "matrix<<EOF"
            echo "$wrapped"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          {
            echo "### 📱 Build Matrix"
            echo "**Input:** \`$input\` | **Count:** $(echo "$filtered" | jq 'length')"
            echo '```json'
            echo "$wrapped" | jq '.'
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

  build:
    name: ${{ matrix.model }}
    needs: set-op-model
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-op-model.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Build Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ${{ matrix.model }}/kernel_platform/prebuilts
            ${{ matrix.model }}/kernel_platform/prebuilts-master
          key: build-${{ matrix.model }}-${{ matrix.kernel_version }}-${{ hashFiles('configs/${{ matrix.model }}.json') }}
          restore-keys: |
            build-${{ matrix.model }}-${{ matrix.kernel_version }}-
            build-${{ matrix.model }}-

      - name: Build Kernel
        id: build
        uses: ./.github/actions
        with:
          op_config_json: ${{ toJSON(matrix) }}
          ksu_meta: 'susfs-main/⚡Ultra⚡/'
          hook: ${{ inputs.hook }}
          lsm: ${{ inputs.lsm }}
          enable_zram: ${{ inputs.enable_zram }}
          optimize_level: ${{ inputs.optimize_level }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Outputs
        if: always()
        shell: bash
        run: |
          missing=0
          for out in kernel_version sukisu_version susfs_version image_sha256 warnings_count zip_name zip_size zip_sha256; do
            case "$out" in
              kernel_version) v="${{ steps.build.outputs.kernel_version }}" ;;
              sukisu_version) v="${{ steps.build.outputs.sukisu_version }}" ;;
              susfs_version) v="${{ steps.build.outputs.susfs_version }}" ;;
              image_sha256) v="${{ steps.build.outputs.image_sha256 }}" ;;
              warnings_count) v="${{ steps.build.outputs.warnings_count }}" ;;
              zip_name) v="${{ steps.build.outputs.zip_name }}" ;;
              zip_size) v="${{ steps.build.outputs.zip_size }}" ;;
              zip_sha256) v="${{ steps.build.outputs.zip_sha256 }}" ;;
            esac
            [ -z "$v" ] && { echo "::error::Missing: $out"; ((missing++)); } || echo "✅ $out"
          done
          [ $missing -gt 0 ] && exit 1 || exit 0

      - name: Build Summary
        if: always()
        shell: bash
        run: |
          status="${{ job.status }}"
          [ "$status" = "success" ] && emoji="✅" || emoji="❌"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## $emoji ${{ matrix.model }} - $status
          
          | Property | Value |
          |----------|-------|
          | Kernel | ${{ steps.build.outputs.kernel_version }} |
          | SukiSU | ${{ steps.build.outputs.sukisu_version }} |
          | SUSFS | ${{ steps.build.outputs.susfs_version }} |
          | Warnings | ${{ steps.build.outputs.warnings_count }} |
          | Package | \`${{ steps.build.outputs.zip_name }}\` |
          | Size | $(numfmt --to=iec-i --suffix=B ${{ steps.build.outputs.zip_size }} 2>/dev/null || echo "${{ steps.build.outputs.zip_size }}") |
          
          **Config:** Hook=\`${{ inputs.hook }}\` LSM=\`${{ inputs.lsm }}\` ZRAM=\`${{ inputs.enable_zram }}\` Opt=\`${{ inputs.optimize_level }}\`
          EOF

      - name: Upload Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ matrix.model }}-${{ matrix.android_version }}-${{ matrix.kernel_version }}
          path: |
            ${{ matrix.model }}/artifacts/${{ steps.build.outputs.zip_name }}
            ${{ matrix.model }}/artifacts/build_info.txt
          retention-days: 7
          compression-level: 0
          if-no-files-found: error

      - name: Cleanup on Cancel
        if: cancelled()
        shell: bash
        run: |
          echo "::warning::Build cancelled for ${{ matrix.model }}"
          rm -rf "${{ matrix.model }}/artifacts" "${{ matrix.model }}/kernel_platform" "${{ matrix.model }}/out" "${{ matrix.model }}/downloads" || true
          echo "✅ Cleanup completed"

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: 'OnePlus Kernels - SukiSU Ultra & SUSFS v1.5.12'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate Tag
        shell: bash
        run: |
          BASE="v1.5.12-r0"
          LATEST=$(gh api repos/${{ github.repository }}/tags \
            --jq '[.[] | select(.name | startswith("v1.5.12-r")) | .name] | .[0]' 2>/dev/null || echo "")
          
          if [ -z "$LATEST" ]; then
            NEW_TAG="$BASE"
          else
            REV=$(echo "$LATEST" | sed -n 's/.*-r\([0-9]\+\)$/\1/p')
            NEW_TAG="v1.5.12-r$((${REV:-0} + 1))"
          fi
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "📌 New tag: $NEW_TAG"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts

      - name: Organize Assets
        shell: bash
        run: |
          set -euo pipefail
          
          mkdir -p ./release-assets
          
          echo "Organizing artifacts..."
          find ./all-artifacts -name "*.zip" -type f | while read -r zip; do
            filename=$(basename "$zip")
            echo "  Found: $filename"
            cp "$zip" "./release-assets/$filename"
          done
          
          find ./all-artifacts -name "build_info.txt" -type f | while read -r info; do
            model=$(echo "$info" | sed -n 's|.*/kernel-\([^/]*\)-android.*/.*|\1|p')
            [ -n "$model" ] && cp "$info" "./release-assets/build_info_${model}.txt"
          done
          
          echo ""
          echo "Release assets:"
          ls -lh ./release-assets/
          
          zip_count=$(find ./release-assets -name "*.zip" -type f | wc -l)
          [ "$zip_count" -eq 0 ] && { echo "::error::No ZIPs found!"; exit 1; }
          
          echo "✅ Found $zip_count kernel ZIP(s)"

      - name: Generate Release Notes
        shell: bash
        run: |
          set -euo pipefail
          
          cat << 'EOF' > notes.md
          # 🚀 SukiSU Ultra with SUSFS v1.5.12
          
          **Module:** https://github.com/sidex15/ksu_module_susfs  
          **Manager:** https://github.com/SukiSU-Ultra/SukiSU-Ultra  
          
          ## 📱 Built Devices
          
          | Device | Kernel | SukiSU | SUSFS | Android | Base |
          |--------|--------|--------|-------|---------|------|
          EOF
          
          find ./release-assets -name "build_info_*.txt" -type f | sort | while read -r info; do
            model=$(basename "$info" | sed 's/build_info_\(.*\)\.txt/\1/')
            kernel_ver=$(grep "^Kernel Version:" "$info" | cut -d: -f2- | xargs || echo "?")
            sukisu_ver=$(grep "^SukiSU Version:" "$info" | cut -d: -f2- | xargs || echo "?")
            susfs_ver=$(grep "^SUSFS Version:" "$info" | cut -d: -f2- | xargs || echo "?")
            android_ver=$(grep "^Android Version:" "$info" | cut -d: -f2- | xargs || echo "?")
            kernel_base=$(grep "^Kernel Base:" "$info" | cut -d: -f2- | xargs || echo "?")
            
            printf "| %-12s | %-18s | %-8s | %-8s | %-8s | %-8s |\n" \
              "$model" "$kernel_ver" "$sukisu_ver" "$susfs_ver" "$android_ver" "$kernel_base" >> notes.md
          done
          
          cat << 'EOF' >> notes.md
          
          ## ✨ Features
          - ⚡ SukiSU Ultra Manager
          - 🛡️ SUSFS v1.5.12
          - 🔐 Magic Mount
          - 🔒 WireGuard
          - 🚀 BBR v1
          - 🐛 Ptrace fix (<5.16)
          - 🎯 Manual/Kprobe/Tracepoint Hooks
          - 💾 ZRAM algorithms (optional)
          - ⚙️ BBG LSM (optional)
          
          ## 📥 Installation
          1. Download ZIP for your device
          2. Reboot to recovery
          3. Flash ZIP
          4. Reboot
          5. Install SukiSU Ultra Manager
          
          ---
          **Build:** $(date -u '+%Y-%m-%d %H:%M UTC') | Run #${{ github.run_number }}
          EOF
          
          cat notes.md

      - name: Create Release
        shell: bash
        run: |
          for i in {1..3}; do
            gh release create "${{ env.NEW_TAG }}" \
              --repo "${{ github.repository }}" \
              --title "${{ env.RELEASE_NAME }}" \
              --notes-file notes.md \
              --prerelease && exit 0
            echo "Retry $i/3..."
            sleep 5
          done
          exit 1

      - name: Upload Assets
        shell: bash
        run: |
          set -euo pipefail
          
          expected=$(find ./release-assets -name "*.zip" -type f | wc -l)
          uploaded=0
          
          find ./release-assets -name "*.zip" -type f | sort | while read -r zip; do
            filename=$(basename "$zip")
            
            for i in {1..3}; do
              if gh release upload "${{ env.NEW_TAG }}" "$zip" \
                 --repo "${{ github.repository }}" --clobber; then
                echo "✅ $filename"
                ((uploaded++))
                break
              fi
              echo "⚠️ Retry $i/3: $filename"
              sleep 5
            done
          done
          
          actual=$(gh release view "${{ env.NEW_TAG }}" \
            --repo "${{ github.repository }}" \
            --json assets --jq '.assets | length')
          
          echo "Expected: $expected | In Release: $actual"
          [ "$actual" -eq 0 ] && { echo "::error::No assets!"; exit 1; }
          echo "✅ Release has $actual asset(s)"

      - name: Release Summary
        if: always()
        shell: bash
        run: |
          status="${{ job.status }}"
          [ "$status" = "success" ] && emoji="✅" || emoji="❌"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # $emoji Release: ${{ env.NEW_TAG }}
          
          **Status:** $status  
          **URL:** https://github.com/${{ github.repository }}/releases/tag/${{ env.NEW_TAG }}
          
          ## Assets
          EOF
          
          find ./release-assets -name "*.zip" -type f 2>/dev/null | while read -r f; do
            echo "- \`$(basename "$f")\` ($(stat -c%s "$f" | numfmt --to=iec-i --suffix=B))" >> $GITHUB_STEP_SUMMARY
          done || echo "- No assets found" >> $GITHUB_STEP_SUMMARY
