name: Build OnePlus Kernels with SukiSU Ultra

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Create a release?'
        required: true
        type: boolean
        default: false
      op_model:
        description: 'Select kernels to build'
        required: true
        type: choice
        options:
          - ALL
          - android15-6.6
          - android14-6.1
          - android14-5.15
          - android13-5.15
          - android13-5.10
          - android12-5.10
          - OP13-CPH
          - OP13-PJZ
          - OP13r
          - OP13S
          - OP13T
          - OP12
          - OP12r
          - OP11
          - OP11r
          - OP10pro
          - OP10t
          - OP-Nord-5
          - OP-NORD-4
          - OP-NORD-4-CE
          - OP-NORD-CE4-LITE
          - OP-ACE-5-PRO
          - OP-ACE-5
          - OP-ACE-3-PRO
          - OP-ACE-3V
          - OP-ACE-2-PRO
          - OP-ACE-2
          - OP-OPEN
          - OP-PAD-3
          - OP-PAD-2-PRO
          - OP-PAD-2
          - OP-PAD-PRO
        default: ALL
      hook:
        description: 'Hook type'
        required: false
        type: choice
        options: [kprobe, manual, tracepoint]
        default: manual
      lsm:
        description: 'Enable BBG LSM'
        required: false
        type: boolean
        default: false
      enable_zram:
        description: 'Enable ZRAM algorithms'
        required: false
        type: boolean
        default: false
      optimize_level:
        description: 'Optimization level'
        required: false
        type: choice
        options: [O2, O3]
        default: O2

concurrency:
  group: build-${{ github.workflow }}-${{ github.event.inputs.op_model }}
  cancel-in-progress: true

jobs:
  set-op-model:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: configs/
          sparse-checkout-cone-mode: false

      - name: Setup Matrix
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          
          [ ! -d "configs" ] && { echo "::error::configs/ not found!"; exit 1; }
          
          # Stable sorted list of configs
          declare -a models=()
          while IFS= read -r -d '' file; do
            models+=("$(basename "$file" .json)")
          done < <(find configs/ -name "*.json" -print0 | sort -z)
          
          [ ${#models[@]} -eq 0 ] && { echo "::error::No configs found!"; exit 1; }
          
          echo "Found ${#models[@]} config(s)"
          
          # Build JSON array
          echo "[" > matrix.json
          first=true
          for model in "${models[@]}"; do
            file="configs/$model.json"
            jq empty "$file" 2>/dev/null || { echo "::warning::Invalid JSON: $file"; continue; }
            [ "$first" = false ] && echo "," >> matrix.json
            jq -r '.' "$file" >> matrix.json
            first=false
          done
          echo "]" >> matrix.json
          
          # Apply filter based on input
          input="${{ github.event.inputs.op_model }}"
          jq_filter="."
          
          if [[ "$input" == "ALL" ]]; then
            echo "Building all models"
          elif [[ "$input" == android*-* ]]; then
            av="${input%%-*}"
            kv="${input#*-}"
            
            if [ -z "$av" ] || [ -z "$kv" ]; then
              echo "::error::Invalid android-kernel format: $input"
              exit 1
            fi
            
            echo "Filtering: Android=$av, Kernel=$kv"
            jq_filter="map(select(.android_version == \"$av\" and .kernel_version == \"$kv\"))"
          else
            echo "Filtering: Model=$input"
            jq_filter="map(select(.model == \"$input\"))"
          fi
          
          # Apply filter
          filtered=$(jq -c "$jq_filter" matrix.json)
          count=$(echo "$filtered" | jq 'length')
          
          # Validate results
          if [ "$count" -eq 0 ]; then
            echo "::error::No configurations match: $input"
            exit 1
          fi
          
          if [ "$count" -gt 256 ]; then
            echo "::error::Too many configurations ($count > 256)"
            exit 1
          fi
          
          echo "Matched $count configuration(s)"
          
          # Wrap in include object
          wrapped=$(jq -n --argjson items "$filtered" '{ include: $items }')
          
          # Output to GitHub
          {
            echo "matrix<<EOF"
            echo "$wrapped"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          # Generate summary
          {
            echo "### 📱 Build Matrix"
            echo "**Input:** \`$input\` | **Matched:** $count configuration(s)"
            echo ""
            echo "<details>"
            echo "<summary>View Matrix JSON</summary>"
            echo ""
            echo '```json'
            echo "$wrapped" | jq '.'
            echo '```'
            echo "</details>"
            echo ""
            echo "| # | Model | Android | Kernel |"
            echo "|---|-------|---------|--------|"
            
            echo "$filtered" | jq -r '.[] | "\(.model)|\(.android_version)|\(.kernel_version)"' | \
            awk -F'|' '{printf "| %d | %s | %s | %s |\n", NR, $1, $2, $3}'
          } >> $GITHUB_STEP_SUMMARY

  build:
    name: ${{ matrix.model }}
    needs: set-op-model
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-op-model.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Compiler Cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ matrix.model }}-${{ matrix.kernel_version }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ matrix.model }}-${{ matrix.kernel_version }}-
            ccache-${{ matrix.model }}-
          save-always: false

      - name: Setup Prebuilts Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.model }}/kernel_platform/prebuilts
            ${{ matrix.model }}/kernel_platform/prebuilts-master
          key: prebuilts-${{ matrix.model }}-${{ matrix.kernel_version }}-${{ hashFiles(format('configs/{0}.json', matrix.model)) }}
          restore-keys: |
            prebuilts-${{ matrix.model }}-${{ matrix.kernel_version }}-
            prebuilts-${{ matrix.model }}-
          save-always: false

      - name: Build Kernel
        id: build
        uses: ./.github/actions
        with:
          op_config_json: ${{ toJSON(matrix) }}
          ksu_meta: 'susfs-main/⚡Ultra⚡/'
          hook: ${{ inputs.hook }}
          lsm: ${{ inputs.lsm }}
          enable_zram: ${{ inputs.enable_zram }}
          optimize_level: ${{ inputs.optimize_level }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Outputs
        if: always()
        shell: bash
        run: |
          missing=0
          for out in kernel_version sukisu_version susfs_version image_sha256 warnings_count zip_name zip_size zip_sha256; do
            case "$out" in
              kernel_version) v="${{ steps.build.outputs.kernel_version }}" ;;
              sukisu_version) v="${{ steps.build.outputs.sukisu_version }}" ;;
              susfs_version) v="${{ steps.build.outputs.susfs_version }}" ;;
              image_sha256) v="${{ steps.build.outputs.image_sha256 }}" ;;
              warnings_count) v="${{ steps.build.outputs.warnings_count }}" ;;
              zip_name) v="${{ steps.build.outputs.zip_name }}" ;;
              zip_size) v="${{ steps.build.outputs.zip_size }}" ;;
              zip_sha256) v="${{ steps.build.outputs.zip_sha256 }}" ;;
            esac
            [ -z "$v" ] && { echo "::error::Missing: $out"; ((missing++)); } || echo "✅ $out"
          done
          [ $missing -gt 0 ] && exit 1 || exit 0

      - name: Build Summary
        if: always()
        shell: bash
        run: |
          status="${{ job.status }}"
          [ "$status" = "success" ] && emoji="✅" || emoji="❌"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## $emoji ${{ matrix.model }} - $status
          
          | Property | Value |
          |----------|-------|
          | Kernel | ${{ steps.build.outputs.kernel_version }} |
          | SukiSU | ${{ steps.build.outputs.sukisu_version }} |
          | SUSFS | ${{ steps.build.outputs.susfs_version }} |
          | Warnings | ${{ steps.build.outputs.warnings_count }} |
          | Package | \`${{ steps.build.outputs.zip_name }}\` |
          | Size | $(numfmt --to=iec-i --suffix=B ${{ steps.build.outputs.zip_size }} 2>/dev/null || echo "${{ steps.build.outputs.zip_size }}") |
          
          **Config:** Hook=\`${{ inputs.hook }}\` LSM=\`${{ inputs.lsm }}\` ZRAM=\`${{ inputs.enable_zram }}\` Opt=\`${{ inputs.optimize_level }}\`
          EOF

      - name: Upload Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ matrix.model }}-${{ matrix.android_version }}-${{ matrix.kernel_version }}
          path: |
            ${{ matrix.model }}/artifacts/${{ steps.build.outputs.zip_name }}
            ${{ matrix.model }}/artifacts/build_info.txt
          retention-days: 7
          compression-level: 0
          if-no-files-found: error

      - name: Prepare Cache Directories
        if: always()
        shell: bash
        run: |
          echo "::group::Prepare cache directories"
          
          # Ensure ccache directory exists
          mkdir -p ~/.ccache
          
          # Ensure prebuilts directories exist (even if empty)
          if [ -d "${{ matrix.model }}" ]; then
            mkdir -p "${{ matrix.model }}/kernel_platform/prebuilts"
            mkdir -p "${{ matrix.model }}/kernel_platform/prebuilts-master"
          fi
          
          # Show cache sizes
          echo "Cache directory sizes:"
          du -sh ~/.ccache 2>/dev/null || echo "  ~/.ccache: empty"
          du -sh "${{ matrix.model }}/kernel_platform/prebuilts" 2>/dev/null || echo "  prebuilts: empty"
          du -sh "${{ matrix.model }}/kernel_platform/prebuilts-master" 2>/dev/null || echo "  prebuilts-master: empty"
          
          echo "::endgroup::"

      - name: Cleanup on Cancel
        if: cancelled()
        shell: bash
        run: |
          echo "::warning::Build cancelled for ${{ matrix.model }}"
          
          # Clean artifacts and build outputs (preserve cache dirs)
          rm -rf "${{ matrix.model }}/artifacts" "${{ matrix.model }}/out" "${{ matrix.model }}/downloads" || true
          
          # Clean kernel_platform but preserve prebuilts
          if [ -d "${{ matrix.model }}/kernel_platform" ]; then
            find "${{ matrix.model }}/kernel_platform" -mindepth 1 -maxdepth 1 \
              ! -name "prebuilts" ! -name "prebuilts-master" \
              -exec rm -rf {} + 2>/dev/null || true
          fi
          
          echo "✅ Cleanup completed (cache preserved)"

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    permissions:
      contents: write
      actions: write
      deployments: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: 'OnePlus Kernels - SukiSU Ultra & SUSFS v1.5.2+'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate Tag
        shell: bash
        run: |
          set -euo pipefail
          
          BASE_VERSION="v1.5.2"
          
          echo "::group::Fetching existing releases"
          # Get all tags matching our pattern and sort numerically
          LATEST=$(gh release list \
            --repo "${{ github.repository }}" \
            --limit 100 \
            --json tagName \
            --jq '[.[] | select(.tagName | startswith("'"$BASE_VERSION"'-r")) | .tagName] | sort_by(split("-r")[1] | tonumber) | .[-1]' \
            2>/dev/null || echo "")
          echo "::endgroup::"
          
          if [ -z "$LATEST" ]; then
            NEW_TAG="${BASE_VERSION}-r0"
            echo "No existing tags found, starting with: $NEW_TAG"
          else
            REV=$(echo "$LATEST" | sed -n 's/.*-r\([0-9]\+\)$/\1/p')
            if [ -z "$REV" ]; then
              echo "::error::Failed to parse revision from: $LATEST"
              exit 1
            fi
            NEW_TAG="${BASE_VERSION}-r$((REV + 1))"
            echo "Latest tag: $LATEST (rev $REV)"
            echo "New tag: $NEW_TAG"
          fi
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "📌 Tag to be created: $NEW_TAG"
          
          # Auto-detect prerelease based on tag name
          if [[ "$NEW_TAG" =~ (alpha|beta|rc|test|dev|pre) ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "🔬 Detected as prerelease"
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
            echo "🎯 Detected as stable release"
          fi

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts

      - name: Organize Assets
        shell: bash
        run: |
          set -euo pipefail
          
          echo "::group::Organizing artifacts"
          mkdir -p ./release-assets
          
          # Copy kernel ZIPs
          zip_count=0
          while IFS= read -r -d '' zip; do
            filename=$(basename "$zip")
            echo "  Found ZIP: $filename"
            cp "$zip" "./release-assets/$filename"
            ((zip_count++))
          done < <(find ./all-artifacts -name "*.zip" -type f -print0 | sort -z)
          
          # Copy build info files with model-specific naming
          info_count=0
          while IFS= read -r -d '' info; do
            # Extract model from artifact path: kernel-{model}-android{version}-{kernel}/build_info.txt
            model=$(echo "$info" | sed -n 's|.*/kernel-\([^/]*\)-android[^/]*/.*|\1|p')
            if [ -n "$model" ]; then
              echo "  Found build info: $model"
              cp "$info" "./release-assets/build_info_${model}.txt"
              ((info_count++))
            fi
          done < <(find ./all-artifacts -name "build_info.txt" -type f -print0 | sort -z)
          
          echo "::endgroup::"
          
          echo ""
          echo "Release assets summary:"
          ls -lh ./release-assets/
          
          if [ "$zip_count" -eq 0 ]; then
            echo "::error::No kernel ZIPs found!"
            exit 1
          fi
          
          echo "✅ Organized $zip_count kernel ZIP(s) and $info_count build info file(s)"

      - name: Generate Release Notes
        shell: bash
        run: |
          set -euo pipefail
          
          cat << 'EOF' > notes.md
          # 🚀 SukiSU Ultra with SUSFS v1.5.2+
          
          **SUSFS Module:** https://github.com/sidex15/susfs4ksu-module (v1.5.2+ branch)  
          **SukiSU Manager:** https://github.com/SukiSU-Ultra/SukiSU-Ultra  
          **SUSFS Kernel:** https://gitlab.com/simonpunk/susfs4ksu  
          
          ## 📱 Built Devices
          
          | Device | Kernel | Android | SukiSU | SUSFS | Status |
          |--------|--------|---------|--------|-------|--------|
          EOF
          
          # Process each build_info.txt
          device_count=0
          while IFS= read -r -d '' info; do
            model=$(basename "$info" | sed 's/build_info_\(.*\)\.txt/\1/')
            
            kernel_ver=$(grep "^Kernel Version:" "$info" 2>/dev/null | cut -d: -f2- | xargs || echo "?")
            android_ver=$(grep "^Android Version:" "$info" 2>/dev/null | cut -d: -f2- | xargs || echo "?")
            sukisu_ver=$(grep "^SukiSU Version:" "$info" 2>/dev/null | cut -d: -f2- | xargs || echo "?")
            susfs_ver=$(grep "^SUSFS Version:" "$info" 2>/dev/null | cut -d: -f2- | xargs || echo "?")
            
            # Find corresponding ZIP and verify SUSFS module
            zip_file=$(find ./release-assets -name "*${model}*.zip" -type f 2>/dev/null | head -1)
            
            if [ -n "$zip_file" ] && [ -f "$zip_file" ] && unzip -l "$zip_file" 2>/dev/null | grep -q "ksu_module_susfs"; then
              status="✅"
            else
              status="⚠️"
            fi
            
            printf "| %-12s | %-18s | %-8s | %-8s | %-8s | %s |\n" \
              "$model" "$kernel_ver" "$android_ver" "$sukisu_ver" "$susfs_ver" "$status" >> notes.md
            
            ((device_count++))
          done < <(find ./release-assets -name "build_info_*.txt" -type f -print0 | sort -z)
          
          if [ "$device_count" -eq 0 ]; then
            echo "| *No builds completed* | - | - | - | - | ❌ |" >> notes.md
          fi
          
          cat << 'EOF' >> notes.md

          ## ✨ Features
          - ⚡ **SukiSU Ultra Manager** (Latest from susfs-main branch)
          - 🛡️ **SUSFS v1.5.2+** (Kernel patches + KSU module included)
          - 🔐 Magic Mount support
          - 🔒 WireGuard VPN support
          - 🚀 BBR TCP congestion control
          - 🐛 Ptrace fix for kernels <5.16
          - 🎯 Flexible hook types (Manual/Kprobe/Tracepoint)
          - 💾 ZRAM with advanced compressors (LZ4K, LZ4KD, 842)
          - ⚙️ BBG LSM (Baseband Guard)
          - 🔧 Optimized builds (O2/O3)
          
          ## 📦 What's Included
          Each kernel ZIP contains:
          - ✅ Kernel Image with SukiSU Ultra & SUSFS patches
          - ✅ SUSFS KSU Module (v1.5.2+ from CI)
          - ✅ AnyKernel3 flasher
          - ✅ All necessary tools and scripts
          
          ## 📥 Installation
          1. **Download** the ZIP for your device
          2. **Reboot** to recovery (TWRP/OrangeFox recommended)
          3. **Flash** the ZIP file
          4. **Reboot** to system
          5. **Install** SukiSU Manager APK
          
          ## ⚙️ Build Configuration
          - **Hook:** `${{ inputs.hook }}`
          - **LSM:** `${{ inputs.lsm }}`
          - **ZRAM:** `${{ inputs.enable_zram }}`
          - **Optimization:** `${{ inputs.optimize_level }}`
          
          ## 🔍 Verification
          After flashing, verify SUSFS is active:
          ```bash
          su -c "dmesg | grep -i susfs"
          ```
          
          You should see SUSFS initialization messages.
          
          ## ⚠️ Legend
          - ✅ = SUSFS module confirmed in package
          - ⚠️ = SUSFS module missing (verify before flashing)
          
          ---
          **Build Date:** $(date -u '+%Y-%m-%d %H:%M UTC')  
          **Build Run:** #${{ github.run_number }}  
          **Commit:** ${{ github.sha }}  
          **Workflow:** ${{ github.workflow }}
          EOF
          
          echo "Generated release notes for $device_count device(s)"
          
          echo "::group::Release Notes Preview"
          cat notes.md
          echo "::endgroup::"

      - name: Create Release with Assets
        shell: bash
        run: |
          set -euo pipefail
          
          echo "::group::Preparing release"
          
          # Determine prerelease flag
          if [ "${{ env.IS_PRERELEASE }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
            echo "Creating as prerelease"
          else
            PRERELEASE_FLAG="--latest"
            echo "Creating as latest stable release"
          fi
          
          # Collect all assets (ZIPs and build info files)
          ASSETS=()
          while IFS= read -r -d '' file; do
            ASSETS+=("$file")
          done < <(find ./release-assets -type f \( -name "*.zip" -o -name "build_info_*.txt" \) -print0 | sort -z)
          
          if [ ${#ASSETS[@]} -eq 0 ]; then
            echo "::error::No assets found to upload!"
            exit 1
          fi
          
          echo "Found ${#ASSETS[@]} asset(s) to upload:"
          printf '  - %s\n' "${ASSETS[@]}"
          
          echo "::endgroup::"
          
          # Create release with all assets in one atomic operation
          # gh release create automatically creates the tag at --target commit
          for attempt in {1..3}; do
            echo "::group::Attempt $attempt/3: Creating release ${{ env.NEW_TAG }}"
            
            if gh release create "${{ env.NEW_TAG }}" \
              --repo "${{ github.repository }}" \
              --title "${{ env.RELEASE_NAME }}" \
              --notes-file notes.md \
              --target "${{ github.sha }}" \
              $PRERELEASE_FLAG \
              "${ASSETS[@]}"; then
              
              echo "::endgroup::"
              echo "✅ Release created successfully!"
              exit 0
            fi
            
            echo "::endgroup::"
            echo "⚠️ Attempt $attempt failed"
            
            if [ $attempt -lt 3 ]; then
              sleep_time=$((attempt * 5))
              echo "Retrying in ${sleep_time}s..."
              sleep $sleep_time
            fi
          done
          
          echo "::error::Failed to create release after 3 attempts"
          exit 1

      - name: Verify Release
        if: success()
        shell: bash
        run: |
          set -euo pipefail
          
          echo "::group::Verifying release ${{ env.NEW_TAG }}"
          
          # Wait for GitHub API to process
          sleep 3
          
          # Get release info
          RELEASE_INFO=$(gh release view "${{ env.NEW_TAG }}" \
            --repo "${{ github.repository }}" \
            --json tagName,name,url,assets,isDraft,isPrerelease,createdAt)
          
          ASSET_COUNT=$(echo "$RELEASE_INFO" | jq '.assets | length')
          IS_DRAFT=$(echo "$RELEASE_INFO" | jq -r '.isDraft')
          IS_PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.isPrerelease')
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.url')
          CREATED_AT=$(echo "$RELEASE_INFO" | jq -r '.createdAt')
          
          echo "Release Details:"
          echo "  Tag: ${{ env.NEW_TAG }}"
          echo "  URL: $RELEASE_URL"
          echo "  Assets: $ASSET_COUNT"
          echo "  Draft: $IS_DRAFT"
          echo "  Prerelease: $IS_PRERELEASE"
          echo "  Created: $CREATED_AT"
          
          if [ "$ASSET_COUNT" -eq 0 ]; then
            echo "::error::No assets found in release!"
            exit 1
          fi
          
          echo ""
          echo "Uploaded Assets:"
          echo "$RELEASE_INFO" | jq -r '.assets[] | "  - \(.name) (\(.size | tonumber | (. / 1048576 | floor))MB)"'
          
          echo "::endgroup::"
          echo "✅ Release verified successfully!"

      - name: Release Summary
        if: always()
        shell: bash
        run: |
          status="${{ job.status }}"
          [ "$status" = "success" ] && emoji="✅" || emoji="❌"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # $emoji Release: ${{ env.NEW_TAG }}
          
          **Status:** $status  
          **Type:** $([ "${{ env.IS_PRERELEASE }}" = "true" ] && echo "Prerelease 🔬" || echo "Stable 🎯")  
          **URL:** https://github.com/${{ github.repository }}/releases/tag/${{ env.NEW_TAG }}
          
          ## 📦 Assets
          EOF
          
          if [ "$status" = "success" ]; then
            # Fetch actual uploaded assets from release
            gh release view "${{ env.NEW_TAG }}" \
              --repo "${{ github.repository }}" \
              --json assets \
              --jq '.assets[] | "- `\(.name)` (\((.size | tonumber) / 1048576 | floor)MB)"' \
              >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "- Could not fetch asset list" >> $GITHUB_STEP_SUMMARY
          else
            # Show what we tried to upload
            find ./release-assets -name "*.zip" -type f 2>/dev/null | sort | while read -r f; do
              filename=$(basename "$f")
              size_bytes=$(stat -c%s "$f" 2>/dev/null || echo "0")
              size_mb=$((size_bytes / 1048576))
              
              if unzip -l "$f" 2>/dev/null | grep -q "ksu_module_susfs"; then
                status_icon="✅"
              else
                status_icon="⚠️"
              fi
              
              echo "- $status_icon \`$filename\` (${size_mb}MB)" >> $GITHUB_STEP_SUMMARY
            done || echo "- No assets found" >> $GITHUB_STEP_SUMMARY
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          
          ## 🔧 Configuration
          | Setting | Value |
          |---------|-------|
          | Hook | `${{ inputs.hook }}` |
          | LSM | `${{ inputs.lsm }}` |
          | ZRAM | `${{ inputs.enable_zram }}` |
          | Optimization | `${{ inputs.optimize_level }}` |
          
          **Legend:** ✅ = SUSFS module included | ⚠️ = SUSFS module missing
          EOF
