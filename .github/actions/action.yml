name: 'Build OnePlus Kernel with SukiSU Ultra'

inputs:
  op_config_json:
    description: 'JSON string containing full device config'
    required: true
  ksu_meta:
    description: 'SukiSU Ultra metadata (branch/tag/hash)'
    required: false
    default: 'susfs-main/⚡Ultra⚡/'
  hook:
    description: 'Hook type (kprobe/manual/tracepoint)'
    required: false
    default: 'manual'
  lsm:
    description: 'Enable Baseband Guard LSM (true/false)'
    required: false
    default: 'false'
  enable_zram:
    description: 'Enable additional ZRAM algorithms'
    required: false
    default: 'false'
  optimize_level:
    description: 'Optimization level (O2/O3)'
    required: false
    default: 'O2'
  github_token:
    description: 'GitHub token for API access'
    required: true

outputs:
  kernel_version:
    description: 'Built kernel version'
    value: ${{ steps.save_metadata.outputs.kernel_version }}
  sukisu_version:
    description: 'SukiSU version'
    value: ${{ steps.save_metadata.outputs.sukisu_version }}
  susfs_version:
    description: 'SUSFS version'
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    description: 'Kernel image SHA256'
    value: ${{ steps.collect_stats.outputs.image_sha256 }}
  warnings_count:
    description: 'Build warnings count'
    value: ${{ steps.collect_stats.outputs.warnings_count }}
  zip_name:
    description: 'Created ZIP filename'
    value: ${{ steps.create_zip.outputs.zip_name }}

runs:
  using: composite
  steps:
    - name: Parse op_config_json
      shell: bash
      run: |
        set -euo pipefail
        echo '${{ inputs.op_config_json }}' > /tmp/config.json
        jq -r 'to_entries[] | "OP_\(.key | ascii_upcase)=\(.value)"' /tmp/config.json >> "$GITHUB_ENV"
        echo "Parsed config:"
        jq '.' /tmp/config.json

    - name: Validate Inputs
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Validate inputs"
        model="$OP_MODEL"
        soc="$OP_SOC"
        branch="$OP_BRANCH"
        manifest="$OP_MANIFEST"
        optimize='${{ inputs.optimize_level }}'
    
        [[ -n "$model" ]] || { echo "::error::Input 'model' cannot be empty"; exit 1; }
        [[ -n "$soc" ]] || { echo "::error::Input 'soc' cannot be empty"; exit 1; }
        [[ -n "$branch" ]] || { echo "::error::Input 'branch' cannot be empty"; exit 1; }
        [[ -n "$manifest" ]] || { echo "::error::Input 'manifest' cannot be empty"; exit 1; }
    
        if ! [[ "$soc" =~ ^[A-Za-z0-9_-]+$ ]]; then
          echo "::error::Input 'soc' contains invalid characters"; exit 1
        fi    
        if ! [[ "$branch" =~ ^[A-Za-z0-9._/-]+$ ]]; then
          echo "::error::Input 'branch' contains invalid characters"; exit 1
        fi    
        if [[ "$manifest" == http*://* ]]; then
          if ! [[ "$manifest" =~ ^https:// ]]; then
            echo "::error::Manifest URL must be HTTPS"; exit 1
          fi
          if ! [[ "$manifest" =~ \.xml($|\?) ]]; then
            echo "::error::Manifest URL should point to an XML file"; exit 1
          fi
        else
          if ! [[ "$manifest" =~ \.xml$ ]]; then
            echo "::error::Manifest filename must end with .xml"; exit 1
          fi
          if [[ "$manifest" =~ [[:space:]] ]]; then
            echo "::error::Manifest filename cannot contain spaces"; exit 1
          fi
        fi
        case "$optimize" in
          O2|O3) ;;
          *) echo "::error::optimize_level must be O2 or O3; got '$optimize'"; exit 1 ;;
        esac
        echo "✅ Input validation passed"
        echo "::endgroup::"

    - name: Install Minimal Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Install dependencies"
        sudo apt-get -o Acquire::Retries=3 update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          git curl ca-certificates build-essential clang lld flex bison \
          libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool \
          libxml2-utils rsync unzip dwarves file python3 ccache jq bc
        sudo apt-get clean
        echo "✅ Dependencies installed"
        echo "::endgroup::"

    - name: Setup Base Environment
      shell: bash
      run: |
        set -euo pipefail
        CONFIG="$OP_MODEL"
        echo "CONFIG=$CONFIG" >> "$GITHUB_ENV"
        REPO="/usr/local/bin/repo"
        if [ ! -x "$REPO" ]; then
          curl -s https://storage.googleapis.com/git-repo-downloads/repo -o "$REPO"
          chmod +x "$REPO"
        fi
        echo "REPO=$REPO" >> "$GITHUB_ENV"

    - name: Create and Enable Swap
      shell: bash
      run: |
        sudo swapoff -a || true
        sudo fallocate -l 3G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -h

    - name: Set Cache Environment
      shell: bash
      run: |
        echo "CCACHE_DIR=$HOME/.ccache_${{ env.CONFIG }}" >> "$GITHUB_ENV"
        mkdir -p "$HOME/.ccache_${{ env.CONFIG }}"

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Initialize kernel source"
        echo "Creating folder for configuration: $CONFIG"
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "$OP_MANIFEST" == https://* ]]; then
          mkdir -p .repo/manifests
          curl --fail --show-error --location --proto '=https' "$OP_MANIFEST" -o .repo/manifests/temp_manifest.xml
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git -b "$OP_BRANCH" -m "$OP_MANIFEST" --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        "$REPO" --version
        success=false
        for i in 1 2 3; do
          if "$REPO" sync -c --no-clone-bundle --no-tags --optimized-fetch \
             -j"$(nproc --all)" --fail-fast; then
            success=true
            break
          fi
          echo "⚠️ repo sync attempt $i failed; retrying..."
          sleep 30
        done
        $success || { echo "::error::repo sync failed after 3 attempts"; exit 1; }
        echo "✅ Kernel source synced"
        echo "::endgroup::"

    - name: Get Kernel Version Info
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Get kernel version"
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        for f in "${CONFIG_FILES[@]}"; do
          if [ -f "$f" ]; then
            l=$(grep '^[[:space:]]*BRANCH=' "$f" || true)
            if [ -n "$l" ]; then BRANCH_LINE="$l"; break; fi
          fi
        done
        if [ -z "$BRANCH_LINE" ]; then
          echo "::error::No BRANCH= found in config files"; exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        if [ -z "$ANDROID_VERSION" ]; then
          echo "::error::Could not parse android version from BRANCH=$BRANCH_VALUE"
          exit 1
        fi
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        cd "$ARTIFACTS_DIR"
        echo "$ANDROID_VERSION-$FULL_VERSION" > "${OP_MODEL}.txt"
        echo "ANDROID_VER=$ANDROID_VERSION" >> "$GITHUB_ENV"
        echo "KERNEL_VER=$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"
        echo "KERNEL_FULL_VER=$ANDROID_VERSION-$FULL_VERSION" >> "$GITHUB_ENV"
        echo "SUSFS_KERNEL_BRANCH=gki-$ANDROID_VERSION-$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"
        echo "✅ Detected: $ANDROID_VERSION-$FULL_VERSION"
        echo "::endgroup::"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Clone dependencies"
        ANYKERNEL_BRANCH="gki-2.0"
        SUSFS_BRANCH="${{ env.SUSFS_KERNEL_BRANCH }}"
        
        echo "Using AnyKernel3 branch: $ANYKERNEL_BRANCH"
        echo "Using SUSFS branch: $SUSFS_BRANCH"
        
        git clone --depth=1 https://github.com/Bouteillepleine/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH" --depth=1
        git clone --depth=1 https://github.com/ShirkNeko/SukiSU_patch.git
        
        cd susfs4ksu
        SUSFS_COMMIT_SHA=$(git rev-parse HEAD)
        echo "SUSFS_COMMIT_SHA=$SUSFS_COMMIT_SHA" >> $GITHUB_ENV
        
        if [ -f "kernel_patches/include/linux/susfs.h" ]; then
          SUSFS_VERSION=$(grep '#define SUSFS_VERSION' kernel_patches/include/linux/susfs.h | awk -F'"' '{print $2}')
          echo "SUSFS_VERSION=$SUSFS_VERSION" >> $GITHUB_ENV
          echo "Detected SUSFS version: $SUSFS_VERSION"
        fi
        
        cd ..
        echo "✅ Dependencies cloned successfully"
        echo "::endgroup::"
    
    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || true
        rm -f msm-kernel/android/abi_gki_protected_exports_* || true
        df -h

    - name: Add BBG (LSM)
      if: ${{ inputs.lsm == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Add BBG LSM"
        cd "$CONFIG/kernel_platform"
        echo "Adding BBG..."
        if ! wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash; then
          echo "::warning::BBG setup script failed, continuing anyway"
        fi
        echo "CONFIG_BBG=y" >> common/arch/arm64/configs/gki_defconfig
        sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' common/security/Kconfig
        echo "✅ BBG LSM added"
        echo "::endgroup::"

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Add SukiSU Ultra"
        cd "$CONFIG/kernel_platform"
    
        META="${{ inputs.ksu_meta }}"
        if [[ "$(grep -o '/' <<< "$META" | wc -l)" -lt 2 ]]; then
          echo "::error::ksu_meta parameter missing required '/' separators"
          echo "Format should be: branch/custom_tag/commit_hash"
          exit 1
        fi
    
        IFS='/' read -r BRANCH_NAME CUSTOM_TAG MANUAL_HASH <<< "$META"
    
        echo "Branch: $BRANCH_NAME"
        [[ -n "$CUSTOM_TAG" ]] && echo "Custom tag: $CUSTOM_TAG" || echo "Custom tag: Not set"
        [[ -n "$MANUAL_HASH" ]] && echo "Manual hash: $MANUAL_HASH" || echo "Manual hash: Not set"
    
        echo "[+] Downloading KernelSU setup script..."
        if ! curl -LSs --retry 3 --retry-delay 2 --connect-timeout 30 \
             "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" \
             -o /tmp/ksu_setup.sh; then
          echo "::error::Failed to download KernelSU setup script"
          exit 1
        fi
        
        if [ ! -s /tmp/ksu_setup.sh ]; then
          echo "::error::Downloaded setup script is empty"
          exit 1
        fi
        
        echo "[+] Setup script content (first 10 lines):"
        head -n 10 /tmp/ksu_setup.sh
        
        echo "[+] Executing setup script..."
        if ! bash -x /tmp/ksu_setup.sh "$BRANCH_NAME" 2>&1 | tee /tmp/ksu_setup.log; then
          echo "::error::KernelSU setup script failed"
          echo "Setup script log:"
          cat /tmp/ksu_setup.log
          exit 1
        fi
        
        if [ ! -d "./KernelSU" ]; then
          echo "::error::KernelSU directory not created"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi
        
        cd ./KernelSU
    
        if [[ -n "$MANUAL_HASH" ]]; then
          echo "[+] Fetching specific commit: $MANUAL_HASH"
          if ! git fetch origin "$BRANCH_NAME" --depth=50; then
            echo "::error::Failed to fetch branch $BRANCH_NAME"
            exit 1
          fi
          if ! git checkout "$MANUAL_HASH"; then
            echo "::error::Failed to checkout commit $MANUAL_HASH"
            exit 1
          fi
          SHORT_HASH=${MANUAL_HASH:0:8}
        fi
    
        echo "[+] Fetching KSU API version..."
        if [ -f "kernel/Makefile" ]; then
          KSU_API_VERSION=$(grep -m1 "KSU_VERSION_API :=" kernel/Makefile | awk -F'= ' '{print $2}' | tr -d '[:space:]' || echo "")
          echo "Found local API version: $KSU_API_VERSION"
        fi
        
        if [ -z "$KSU_API_VERSION" ]; then
          echo "Attempting to fetch from remote..."
          KSU_API_VERSION=$(curl -fsSL --retry 3 --connect-timeout 30 \
            "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" 2>/dev/null | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]' || echo "")
          
          if [ -z "$KSU_API_VERSION" ]; then
            echo "Trying main branch as fallback..."
            KSU_API_VERSION=$(curl -fsSL --retry 3 --connect-timeout 30 \
              "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/Makefile" 2>/dev/null | \
              grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]' || echo "")
          fi
        fi
        
        if [[ -z "$KSU_API_VERSION" ]]; then
          echo "⚠️ Could not fetch API version from any source, using default: 3.1.7"
          KSU_API_VERSION="3.1.7"
        else
          if ! [[ "$KSU_API_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "⚠️ Invalid API version format: $KSU_API_VERSION, using default: 3.1.7"
            KSU_API_VERSION="3.1.7"
          else
            if [[ "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
              echo "⚠️ API version $KSU_API_VERSION is too old, using minimum: 3.1.7"
              KSU_API_VERSION="3.1.7"
            fi
          fi
        fi
        
        echo "Using KSU API version: $KSU_API_VERSION"
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
    
        GIT_HASH=$(git rev-parse --short HEAD)
    
        if [[ -n "$MANUAL_HASH" ]]; then
          USE_HASH="$SHORT_HASH"
        else
          USE_HASH="$GIT_HASH"
        fi
        
        if [[ -z "$CUSTOM_TAG" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$USE_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$USE_HASH]"
        fi
    
        echo "[+] Updating Makefile with version info..."
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
    
        printf 'define get_ksu_version_full\n%s\nendef\n\nKSU_VERSION_API := %s\nKSU_VERSION_FULL := %s\n' \
          "$VERSION_FULL" "$KSU_API_VERSION" "$VERSION_FULL" > /tmp/version_def.txt
        
        awk '/REPO_OWNER :=/ {print; system("cat /tmp/version_def.txt"); inserted=1; next} 1 END {if (!inserted) system("cat /tmp/version_def.txt")}' \
          kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
    
        KSU_VERSION=$(expr $(git rev-list --count HEAD 2>/dev/null || echo 13000) + 10700)
        echo "SUKISUVER=$KSU_VERSION" >> $GITHUB_ENV
    
        echo "✅ SukiSU Ultra added: $VERSION_FULL (version $KSU_VERSION)"
        echo "::endgroup::"

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Apply SUSFS patches"
        cd "$CONFIG/kernel_platform"
        
        SUSFS_SRC="$GITHUB_WORKSPACE/susfs4ksu"
        if [ ! -d "$SUSFS_SRC" ]; then
          echo "::error::SUSFS source directory not found at $SUSFS_SRC"
          exit 1
        fi
        
        echo "Copying SUSFS files from $SUSFS_SRC..."
        cp "$SUSFS_SRC/kernel_patches/50_add_susfs_in_${{ env.SUSFS_KERNEL_BRANCH }}.patch" ./common/
        cp -r "$SUSFS_SRC/kernel_patches/fs/"* ./common/fs/
        cp -r "$SUSFS_SRC/kernel_patches/include/linux/"* ./common/include/linux/

        cd ./common
        
        if [ -z "${SUSFS_VERSION:-}" ]; then
          susfs_version=$(grep '#define SUSFS_VERSION' ./include/linux/susfs.h | awk -F'"' '{print $2}')
          echo "SUSFS_VERSION=$susfs_version" >> $GITHUB_ENV
          echo "SUSVER=$susfs_version" >> $GITHUB_ENV
        else
          echo "SUSVER=${SUSFS_VERSION}" >> $GITHUB_ENV
        fi

        GKI_V="${{ env.ANDROID_VER }}-${{ env.KERNEL_VER }}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')

        if [ "$GKI_V" = "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Fixing legacy 5.15 issues..."
          if curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused \
            "https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy"; then
            patch -p1 < fix_5.15.legacy.patch
          else
            echo "::warning::Failed to download 5.15 legacy patch"
          fi
        fi

        fake_patched=0
        if [ "$GKI_V" = "android15-6.6" ]; then
          if ! grep -qxF $'\tunsigned int nr_subpages = __PAGE_SIZE / PAGE_SIZE;' ./fs/proc/task_mmu.c; then
            echo "Applying fake patch for android15-6.6"
            sed -i -e '/int ret = 0, copied = 0;/a \\tunsigned int nr_subpages \= __PAGE_SIZE \/ PAGE_SIZE;' \
                   -e '/int ret = 0, copied = 0;/a \\tpagemap_entry_t \*res = NULL;' ./fs/proc/task_mmu.c
            fake_patched=1
          fi
        fi
        
        if [ "$GKI_V" = "android12-5.10" ] || [ "$GKI_V" = "android13-5.15" ]; then
          if ! grep -qxF $'\tif (!vma_pages(vma))' ./fs/proc/task_mmu.c; then
            echo "Applying fake patch for $GKI_V"
            fake_patched=1
          fi
        fi

        echo "Applying SUSFS patch..."
        if ! patch -p1 < 50_add_susfs_in_${{ env.SUSFS_KERNEL_BRANCH }}.patch; then
          echo "::warning::SUSFS patch applied with warnings"
        fi

        if [ "$fake_patched" = 1 ]; then
          if [ "$GKI_V" = "android15-6.6" ]; then
            if grep -qxF $'\tunsigned int nr_subpages = __PAGE_SIZE / PAGE_SIZE;' ./fs/proc/task_mmu.c; then
              sed -i -e '/unsigned int nr_subpages \= __PAGE_SIZE \/ PAGE_SIZE;/d' \
                     -e '/pagemap_entry_t \*res = NULL;/d' ./fs/proc/task_mmu.c
            fi
          fi
          if [ "$GKI_V" = "android12-5.10" ] || [ "$GKI_V" = "android13-5.15" ]; then
            if grep -qxF $'\t\tgoto show_pad;' ./fs/proc/task_mmu.c; then
              sed -i -e 's/goto show_pad;/return 0;/' ./fs/proc/task_mmu.c
            fi
          fi
        fi

        KERNEL_VERSION="${{ env.KERNEL_VER }}"
        MIN_VERSION="5.16"
        if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
          echo "Patching ptrace for kernel < 5.16"
          if curl -fsSL -o gki_ptrace.patch \
            "https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/gki_ptrace.patch" 2>/dev/null; then
            patch -p1 -F 3 < gki_ptrace.patch || echo "::warning::ptrace patch applied with warnings"
          else
            echo "⚠️ ptrace patch not available, skipping..."
          fi
        fi

        echo "✅ SUSFS patches applied: ${SUSFS_VERSION:-unknown}"
        echo "::endgroup::"

    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Apply hide stuff patches"
        COMMON_DIR="$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common"
        PATCH_DIR="$GITHUB_WORKSPACE/SukiSU_patch"
        
        cd "$COMMON_DIR"
        
        if [ ! -f "$PATCH_DIR/69_hide_stuff.patch" ]; then
          echo "::error::Hide stuff patch not found at: $PATCH_DIR/69_hide_stuff.patch"
          echo "Available files in SukiSU_patch:"
          ls -la "$PATCH_DIR/" || echo "SukiSU_patch directory not found!"
          exit 1
        fi
        
        cp "$PATCH_DIR/69_hide_stuff.patch" ./
        echo "Applying hide stuff patch..."
        if ! patch -p1 -F 3 < 69_hide_stuff.patch; then
          echo "::warning::Hide stuff patch applied with warnings"
        fi
        echo "✅ Hide stuff patches applied"
        echo "::endgroup::"

    - name: Apply HMBIRD Patch (6.6 kernels)
      if: ${{ env.KERNEL_VER == '6.6' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Apply HMBIRD patch"
        cd "$CONFIG/kernel_platform/common"
        
        echo "Downloading HMBIRD patch..."
        if curl -fsSL -o hmbird_patch.patch \
          "https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_patch.patch"; then
          
          if ! grep -q 'hmbird_patch.o' drivers/Makefile; then
            echo 'obj-y += hmbird_patch.o' >> drivers/Makefile
          fi
          
          echo "Applying HMBIRD patch..."
          patch -p1 -F 3 < hmbird_patch.patch || echo "::warning::HMBIRD patch applied with warnings"
          
          echo "✅ HMBIRD patch applied"
        else
          echo "⚠️ HMBIRD patch not available, skipping..."
        fi
        echo "::endgroup::"

    - name: Apply SCHED_EXT (6.6 kernels)
      if: ${{ env.KERNEL_VER == '6.6' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Apply SCHED_EXT"
        cd "$CONFIG/kernel_platform/common"
        
        echo "Cloning SCHED_EXT repository..."
        git clone --depth=1 https://github.com/HanKuCha/sched_ext.git
        
        echo "Copying SCHED_EXT files..."
        cp -r ./sched_ext/* ./kernel/sched/
        rm -rf ./sched_ext
        
        echo "✅ SCHED_EXT applied"
        echo "::endgroup::"

    - name: Apply HOOK
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Apply hook patches"
        COMMON_DIR="$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common"
        PATCH_DIR="$GITHUB_WORKSPACE/SukiSU_patch"
        
        cd "$COMMON_DIR"
        HOOK="${{ inputs.hook }}"
        
        if [ "$HOOK" = "kprobe" ]; then
          echo "Using kprobe hooks (no additional patches needed)"
        elif [ "$HOOK" = "manual" ]; then
          if [ ! -f "$PATCH_DIR/hooks/scope_min_manual_hooks_v1.5.patch" ]; then
            echo "::error::Manual hooks patch not found at: $PATCH_DIR/hooks/scope_min_manual_hooks_v1.5.patch"
            exit 1
          fi
          cp "$PATCH_DIR/hooks/scope_min_manual_hooks_v1.5.patch" ./
          echo "Applying manual hooks..."
          if ! patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch; then
            echo "::warning::Manual hooks patch applied with warnings"
          fi
        elif [ "$HOOK" = "tracepoint" ]; then
          if [ ! -f "$PATCH_DIR/hooks/sukisu_tracepoint_hooks_v1.1.patch" ]; then
            echo "::error::Tracepoint hooks patch not found at: $PATCH_DIR/hooks/sukisu_tracepoint_hooks_v1.1.patch"
            exit 1
          fi
          cp "$PATCH_DIR/hooks/sukisu_tracepoint_hooks_v1.1.patch" ./
          echo "Applying tracepoint hooks..."
          if ! patch -p1 -F 3 < sukisu_tracepoint_hooks_v1.1.patch; then
            echo "::warning::Tracepoint hooks patch applied with warnings"
          fi
        fi
        echo "✅ Hook patches applied: $HOOK"
        echo "::endgroup::"

    - name: Apply ZRAM
      if: ${{ inputs.enable_zram == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Apply ZRAM patches"
        COMMON_DIR="$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common"
        PATCH_DIR="$GITHUB_WORKSPACE/SukiSU_patch"
        
        cd "$COMMON_DIR"
        
        echo "Copying ZRAM files..."
        cp -r "$PATCH_DIR/other/zram/lz4k/include/linux/"* ./include/linux/
        cp -r "$PATCH_DIR/other/zram/lz4k/lib/"* ./lib/
        cp -r "$PATCH_DIR/other/zram/lz4k/crypto/"* ./crypto/
        cp -r "$PATCH_DIR/other/zram/lz4k_oplus" ./lib/
        
        LZ4KD_PATCH="$PATCH_DIR/other/zram/zram_patch/${{ env.KERNEL_VER }}/lz4kd.patch"
        LZ4K_OPLUS_PATCH="$PATCH_DIR/other/zram/zram_patch/${{ env.KERNEL_VER }}/lz4k_oplus.patch"
        
        if [ -f "$LZ4KD_PATCH" ]; then
          cp "$LZ4KD_PATCH" ./
          echo "Applying lz4kd patch..."
          patch -p1 -F 3 < lz4kd.patch || echo "::warning::lz4kd patch applied with warnings"
        else
          echo "⚠️ lz4kd patch not found for kernel ${{ env.KERNEL_VER }}"
        fi
        
        if [ -f "$LZ4K_OPLUS_PATCH" ]; then
          cp "$LZ4K_OPLUS_PATCH" ./
          echo "Applying lz4k_oplus patch..."
          patch -p1 -F 3 < lz4k_oplus.patch || echo "::warning::lz4k_oplus patch applied with warnings"
        else
          echo "⚠️ lz4k_oplus patch not found for kernel ${{ env.KERNEL_VER }}"
        fi
        
        echo "✅ ZRAM patches applied"
        echo "::endgroup::"

    - name: Add Configuration Settings
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Configure kernel"
        cd "$CONFIG/kernel_platform"
        CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
    
        echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
        echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
    
        HOOK="${{ inputs.hook }}"
        if [ "$HOOK" = "kprobe" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
        elif [ "$HOOK" = "manual" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
        elif [ "$HOOK" = "tracepoint" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE"
        fi
    
        cat >> "$CONFIG_FILE" << 'EOF'
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_SUS_PATH=y
        CONFIG_KSU_SUSFS_SUS_MAP=y
        CONFIG_KSU_SUSFS_SUS_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_KSTAT=y
        CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
        CONFIG_KSU_SUSFS_TRY_UMOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SPOOF_UNAME=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
        CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
        CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
        CONFIG_TMPFS_XATTR=y
        CONFIG_TMPFS_POSIX_ACL=y
        CONFIG_TCP_CONG_ADVANCED=y
        CONFIG_TCP_CONG_BBR=y
        CONFIG_NET_SCH_FQ=y
        CONFIG_IP_ECN=y
        CONFIG_TCP_ECN=y
        CONFIG_IPV6_ECN=y
        CONFIG_IP_NF_TARGET_ECN=y
        EOF
    
        if [ "${{ inputs.optimize_level }}" = "O3" ]; then
          cat >> "$CONFIG_FILE" << 'EOF'
        # O3 Optimization
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=n
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y
        EOF
        else
          cat >> "$CONFIG_FILE" << 'EOF'
        # O2 Optimization (default)
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n
        EOF
        fi
    
        cat >> "$CONFIG_FILE" << 'EOF'
        CONFIG_LTO_CLANG_THIN=y
        CONFIG_LTO_CLANG=y
        CONFIG_OPTIMIZE_INLINING=y
        EOF
    
        if [ "${{ inputs.enable_zram }}" = "true" ]; then
          cat >> "$CONFIG_FILE" << 'EOF'
        CONFIG_CRYPTO_LZ4HC=y
        CONFIG_CRYPTO_LZ4K=y
        CONFIG_CRYPTO_LZ4KD=y
        CONFIG_CRYPTO_842=y
        CONFIG_CRYPTO_LZ4K_OPLUS=y
        CONFIG_ZRAM_WRITEBACK=y
        EOF
        fi
    
        if [ "${{ inputs.lsm }}" = "true" ]; then
          echo "CONFIG_BBG=y" >> "$CONFIG_FILE"
        fi
        
        if [ "${{ env.KERNEL_VER }}" = "6.6" ]; then
          echo "CONFIG_SCHED_CLASS_EXT=y" >> "$CONFIG_FILE"
        fi
    
        sed -i 's/check_defconfig//' ./common/build.config.gki
        
        echo "Configuration summary:"
        echo "- Hook type: $HOOK"
        echo "- Optimization: ${{ inputs.optimize_level }}"
        echo "- ZRAM: ${{ inputs.enable_zram }}"
        echo "- LSM (BBG): ${{ inputs.lsm }}"
        
        echo "✅ Kernel configured"
        echo "::endgroup::"

    - name: Customize Kernel Branding
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        cd "$KERNEL_PATH/common"
        mkdir -p out
        CUSTOM_LOCALVERSION="-${ANDROID_VER}-OP-UltraBolt"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"
        echo "Kernel branding: $CUSTOM_LOCALVERSION"

    - name: Detect Clang (toolchain for build)
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Detect Clang"
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          [ -d "$base/clang/host/linux-x86" ] || continue
          latest=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 || true)
          if [ -n "$latest" ] && [ -x "$latest/bin/clang" ]; then
            CLANG_BIN="$latest/bin"
            CLANG_FOUND=true
            break
          fi
        done
        if ! $CLANG_FOUND && command -v clang >/dev/null 2>&1; then
          CLANG_BIN="$(dirname "$(command -v clang)")"
          CLANG_FOUND=true
          echo "Using system clang."
        fi
        $CLANG_FOUND || { echo "::error::No clang toolchain found"; exit 1; }
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
        CLANG_VERSION="$("$CLANG_BIN/clang" --version | head -n1)"
        echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
        echo "✅ Detected Clang: $CLANG_VERSION"
        echo "::endgroup::"

    - name: Build Kernel
      shell: bash
      env:
        PYTHONWARNINGS: "ignore:invalid escape sequence"
      run: |
        set -euo pipefail
        echo "::group::Build kernel"
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        cd "$COMMON"
        : > "$COMMON/.scmversion"
        
        export PYTHONWARNINGS="${PYTHONWARNINGS}"
        
        if [ -n "${CLANG_BIN_PATH:-}" ] && [ -x "${CLANG_BIN_PATH}/clang" ]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
        fi
        export LLVM=1 LLVM_IAS=1
        export ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CC=clang
        OUT=out
        mkdir -p "$OUT"
        
        echo "Generating defconfig..."
        make O="$OUT" gki_defconfig
        
        if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
          scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
          sed -i 's/scm_version="$(scm_version --short)"/scm_version=""/' scripts/setlocalversion
        fi
        
        if [ "${{ inputs.optimize_level }}" = "O3" ]; then
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O3"
        else
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O2"
        fi
        
        scripts/config --file "$OUT/.config" -e LTO_CLANG_THIN
        scripts/config --file "$OUT/.config" -e LTO_CLANG
        
        KCFLAGS="-Wno-error -pipe -fno-stack-protector ${KCFLAGS_EXTRA}"
        KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        
        make O="$OUT" olddefconfig
        
        echo "Starting build with $(nproc --all) threads..."
        echo "Build flags: KCFLAGS=$KCFLAGS KCPPFLAGS=$KCPPFLAGS"
        echo "Clang version: ${CLANG_VERSION}"
        
        BUILD_START=$(date +%s)
        set -o pipefail
        make -j"$(nproc --all)" O="$OUT" KCFLAGS="$KCFLAGS" KCPPFLAGS="$KCPPFLAGS" 2>&1 | tee build.log
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))
        
        IMG="$OUT/arch/arm64/boot/Image"
        if [ ! -f "$IMG" ]; then
          echo "::error::Kernel Image missing"
          tail -n 100 build.log
          exit 1
        fi
        sha256sum "$IMG" | tee "$OUT/Image.sha256"
        
        echo "Build completed in $((BUILD_TIME / 60))m $((BUILD_TIME % 60))s"
        echo "Image size: $(stat -c%s "$IMG" | numfmt --to=iec-i --suffix=B)"
        echo "✅ Build completed successfully"
        echo "::endgroup::"

    - name: Save Build Metadata
      id: save_metadata
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        cd "$ARTIFACTS_DIR"
        echo "kernel_version=${{ env.KERNEL_FULL_VER }}" >> "$GITHUB_OUTPUT"
        echo "sukisu_version=${SUKISUVER:-unknown}" >> "$GITHUB_OUTPUT"
        echo "susfs_version=${SUSVER:-unknown}" >> "$GITHUB_OUTPUT"

        - name: Collect Build Stats / Validate Image
      id: collect_stats
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Collect stats"
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        OUT="$COMMON/out"
        IMG="$OUT/arch/arm64/boot/Image"
        
        WARNINGS_COUNT=$(grep -i -E 'warning:' "$COMMON/build.log" | wc -l || echo "0")
        echo "$WARNINGS_COUNT" > "$OUT/warnings.txt"
        
        file "$IMG" > "$OUT/Image.file"
        KERNEL_UNAME=$(strings "$IMG" | grep -E 'Linux version.*#' | tail -n1)
        echo "Kernel Uname: $KERNEL_UNAME"
        echo "KERNEL_UNAME=$KERNEL_UNAME" >> "$GITHUB_ENV"
        
        if ! file "$IMG" | grep -qi 'ARM64'; then
          echo "::error::Image does not appear to be ARM64:"
          file "$IMG"
          exit 1
        fi
        
        MIN_SIZE=$((6*1024*1024))
        ACTUAL_SIZE=$(stat -c %s "$IMG")
        if [ "$ACTUAL_SIZE" -lt "$MIN_SIZE" ]; then
          echo "::error::Image size $ACTUAL_SIZE < $MIN_SIZE (suspicious)"
          exit 1
        fi
        
        IMAGE_SHA256=$(cut -d' ' -f1 "$OUT/Image.sha256")
        echo "Image sha256: $IMAGE_SHA256"
        echo "Image size: $(numfmt --to=iec-i --suffix=B $ACTUAL_SIZE)"
        echo "Build warnings: $WARNINGS_COUNT"
        
        # Write outputs properly
        {
          echo "warnings_count=$WARNINGS_COUNT"
          echo "image_sha256=$IMAGE_SHA256"
        } >> "$GITHUB_OUTPUT"
        
        echo "✅ Stats collected"
        echo "::endgroup::"

    - name: Download and Package ZRAM Module
      if: ${{ inputs.enable_zram == 'true' }}
      id: zram_find
      shell: bash
      continue-on-error: true
      run: |
        set -e
        echo "::group::Download ZRAM module"
        echo "Attempting to get ZRAM module zip download link..."
        retries=3
        success=0
        for i in $(seq 1 $retries); do
          echo "Attempt $i to download..."
          download_url=$(curl -s https://api.github.com/repos/Bouteillepleine/ZRAM-Module/releases/latest | \
            grep "browser_download_url" | grep "ZRAM-Module-.*\.zip" | cut -d '"' -f 4 | head -n 1)

          if [ -n "$download_url" ]; then
            echo "✅ Successfully obtained download link: $download_url"
            wget -N "$download_url" && success=1 && break
          else
            echo "⚠️ Failed to get download link, retrying in 3 seconds..."
            sleep 3
          fi
        done

        if [ "$success" -ne 1 ]; then
          echo "❌ Failed to get ZRAM module download link after $retries attempts"
          echo "upload=false" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"
          exit 0
        fi

        unzip "$(ls -t ZRAM-Module-*.zip | head -1)" -d ZRAM-Module
        target="./ZRAM-Module/zram/zram.ko"
        echo "Searching for zram.ko module file..."
        search_paths=(
          "$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common/out"
          "$GITHUB_WORKSPACE/$CONFIG/kernel_platform/out"
          "$GITHUB_WORKSPACE/$CONFIG/device/qcom"
        )
        zram_path=""
        for path in "${search_paths[@]}"; do
          zram_path=$(find "$path" -type f -name "zram.ko" 2>/dev/null | head -n 1)
          [ -n "$zram_path" ] && break
        done
        if [ -z "$zram_path" ]; then
          zram_path=$(find "$GITHUB_WORKSPACE/$CONFIG" -type f -name "zram.ko" 2>/dev/null | head -n 1)
        fi
        if [ -n "$zram_path" ] && [ -f "$zram_path" ]; then
          echo "✅ ZRAM module file located at: $zram_path"
          mkdir -p "$(dirname "$target")"
          if [ "$(realpath "$zram_path")" != "$(realpath "$target")" ]; then
            cp "$zram_path" "$target"
          else
            echo "Source and target are the same, skipping copy"
          fi
          echo "upload=true" >> "$GITHUB_OUTPUT"
        else
          echo "⚠️ zram.ko file not found"
          echo "upload=false" >> "$GITHUB_OUTPUT"
        fi
        echo "::endgroup::"

    - name: Download SUSFS Module from CI
      shell: bash
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        set -euo pipefail
        echo "::group::Download SUSFS module"
        echo "Downloading SUSFS module from CI..."
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        
        LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
          jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
        
        if [ -z "$LATEST_RUN_ID" ]; then
          echo "⚠️ No successful run found for branch v1.5.2+"
        else
          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | \
            jq -r '.artifacts[0].archive_download_url')
          if [ -n "$ARTIFACT_URL" ] && [ "$ARTIFACT_URL" != "null" ]; then
            curl -L -H "Authorization: Bearer $GITHUB_TOKEN" -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
            echo "✅ SUSFS module downloaded successfully"
            ls -lh ksu_module_susfs_1.5.2+_CI.zip
          else
            echo "⚠️ Failed to fetch artifact URL"
          fi
        fi
        echo "::endgroup::"

    - name: Create Kernel ZIP
      id: create_zip
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Create kernel ZIP"
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        IMAGE_PATH="$CONFIG_DIR/kernel_platform/common/out/arch/arm64/boot/Image"
        if [ ! -f "$IMAGE_PATH" ]; then
          echo "::error::Built Image not found at $IMAGE_PATH"
          exit 1
        fi
    
        cp "$IMAGE_PATH" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        
        ZIP_NAME="AnyKernel3_${OP_MODEL}_${{ env.KERNEL_FULL_VER }}_SukiSU_${SUKISUVER}_${SUSVER}.zip"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
    
        echo "Creating flashable zip: $ZIP_NAME"
        zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./* -x "*.git*" >/dev/null
    
        find "$ARTIFACTS_DIR" -maxdepth 1 -type f ! -name "$ZIP_NAME" ! -name "${OP_MODEL}.txt" -delete
    
        ZIP_SIZE=$(stat -c%s "$ARTIFACTS_DIR/$ZIP_NAME" | numfmt --to=iec-i --suffix=B)
        echo "ZIP size: $ZIP_SIZE"
        
        echo "zip_name=$ZIP_NAME" >> "$GITHUB_OUTPUT"
        echo "✅ Kernel ZIP created: $ZIP_NAME ($ZIP_SIZE)"
        echo "::endgroup::"

    - name: Upload ZRAM Module
      if: ${{ inputs.enable_zram == 'true' && steps.zram_find.outputs.upload == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ZRAM-Module_${{ env.KERNEL_VER }}_${{ env.OP_MODEL }}
        path: ZRAM-Module/*

    - name: Final Build Summary
      shell: bash
      run: |
        set -euo pipefail
        {
          echo "### 🎉 Build Summary"
          echo ""
          echo "- **Model**: ${OP_MODEL}"
          echo "- **SoC**: ${OP_SOC}"
          echo "- **Android**: ${{ env.ANDROID_VER }}"
          echo "- **Kernel**: ${{ env.KERNEL_FULL_VER }}"
          echo "- **SukiSU**: ${SUKISUVER:-unknown}"
          echo "- **SUSFS**: ${SUSVER:-unknown}"
          echo "- **Hook**: ${{ inputs.hook }}"
          echo "- **Optimization**: ${{ inputs.optimize_level }}"
          echo "- **Clang**: ${CLANG_VERSION}"
          echo "- **SHA256**: \`${{ steps.collect_stats.outputs.image_sha256 }}\`"
          echo "- **Warnings**: ${{ steps.collect_stats.outputs.warnings_count }}"
          echo "- **Package**: \`${{ steps.create_zip.outputs.zip_name }}\`"
        } | tee summary.txt
        cat summary.txt >> "$GITHUB_STEP_SUMMARY"
