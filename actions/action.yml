name: Build OnePlus Kernels with SukiSU Ultra

permissions:
  contents: write
  actions: write

inputs:
  op_config_json:
    description: 'JSON string containing full device config'
    required: true
    type: string
  ksu_meta:
    description: 'SukiSU Ultra metadata (branch/tag/hash)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡/'
  hook:
    description: 'Hook type (kprobe/manual/tracepoint)'
    required: false
    type: string
    default: 'manual'
  lsm:
    description: 'Enable Baseband Guard LSM (true/false)'
    required: false
    type: boolean
    default: false
  enable_zram:
    description: 'Enable additional ZRAM algorithms'
    required: false
    type: boolean
    default: false
  optimize_level:
    description: 'Optimization level (O2/O3)'
    required: false
    type: string
    default: O2
  github_token:
    description: 'GitHub token for API access'
    required: true

outputs:
  kernel_version:
    value: ${{ steps.save_metadata.outputs.kernel_version }}
  sukisu_version:
    value: ${{ steps.save_metadata.outputs.sukisu_version }}
  susfs_version:
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    value: ${{ steps.collect_stats.outputs.image_sha256 }}
  warnings:
    value: ${{ steps.collect_stats.outputs.warnings }}

runs:
  using: composite
  steps:
    - name: Parse op_config_json
      shell: bash
      run: |
        set -euo pipefail
        echo '${{ inputs.op_config_json }}' > /tmp/config.json
        jq -r 'to_entries[] | "OP_\(.key | ascii_upcase)=\(.value)"' /tmp/config.json >> "$GITHUB_ENV"
        echo "Parsed config:"
        jq '.' /tmp/config.json

    - name: Validate Inputs
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Validate inputs"
        model="$OP_MODEL"
        soc="$OP_SOC"
        branch="$OP_BRANCH"
        manifest="$OP_MANIFEST"
        optimize='${{ inputs.optimize_level }}'
    
        [[ -n "$model" ]] || { echo "Input 'model' cannot be empty"; exit 1; }
        [[ -n "$soc" ]] || { echo "Input 'soc' cannot be empty"; exit 1; }
        [[ -n "$branch" ]] || { echo "Input 'branch' cannot be empty"; exit 1; }
        [[ -n "$manifest" ]] || { echo "Input 'manifest' cannot be empty"; exit 1; }
    
        if ! [[ "$soc" =~ ^[A-Za-z0-9_-]+$ ]]; then
          echo "Input 'soc' contains invalid characters"; exit 1
        fi    
        if ! [[ "$branch" =~ ^[A-Za-z0-9._/-]+$ ]]; then
          echo "Input 'branch' contains invalid characters"; exit 1
        fi    
        if [[ "$manifest" == http*://* ]]; then
          if ! [[ "$manifest" =~ ^https:// ]]; then
            echo "Manifest URL must be HTTPS"; exit 1
          fi
          if ! [[ "$manifest" =~ \.xml($|\?) ]]; then
            echo "Manifest URL should point to an XML file"; exit 1
          fi
        else
          if ! [[ "$manifest" =~ \.xml$ ]]; then
            echo "Manifest filename must end with .xml"; exit 1
          fi
          if [[ "$manifest" =~ [[:space:]] ]]; then
            echo "Manifest filename cannot contain spaces"; exit 1
          fi
        fi
        case "$optimize" in
          O2|O3) ;;
          *) echo "optimize_level must be O2 or O3; got '$optimize'"; exit 1 ;;
        esac
        echo "Input validation OK."
        echo "::endgroup::"

    - name: Install Minimal Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Install deps"
        sudo apt-get -o Acquire::Retries=3 update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          git curl ca-certificates build-essential clang lld flex bison \
          libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool \
          libxml2-utils rsync unzip dwarves file python3 ccache
        sudo apt-get clean
        echo "::endgroup::"

    - name: Setup Base Environment
      shell: bash
      run: |
        set -euo pipefail
        CONFIG="$OP_MODEL"
        echo "CONFIG=$CONFIG" >> "$GITHUB_ENV"
        REPO="/usr/local/bin/repo"
        if [ ! -x "$REPO" ]; then
          curl -s https://storage.googleapis.com/git-repo-downloads/repo -o "$REPO"
          chmod +x "$REPO"
        fi
        echo "REPO=$REPO" >> "$GITHUB_ENV"

    - name: Create and Enable Swap
      shell: bash
      run: |
        sudo swapoff -a
        sudo fallocate -l 3G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -h

    - name: Set Cache Environment
      shell: bash
      run: |
        echo "CCACHE_DIR=$HOME/.ccache_${{ env.CONFIG }}" >> "$GITHUB_ENV"
        mkdir -p "$HOME/.ccache_${{ env.CONFIG }}"

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -euo pipefail
        echo "Creating folder for configuration: $CONFIG"
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "$OP_MANIFEST" == https://* ]]; then
          mkdir -p .repo/manifests
          curl --fail --show-error --location --proto '=https' "$OP_MANIFEST" -o .repo/manifests/temp_manifest.xml
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git -b "$OP_BRANCH" -m "$OP_MANIFEST" --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        "$REPO" --version
        success=false
        for i in 1 2 3; do
          if "$REPO" sync -c --no-clone-bundle --no-tags --optimized-fetch \
             -j"$(nproc --all)" --fail-fast; then
            success=true
            break
          fi
          echo "repo sync attempt $i failed; retrying..."
          sleep 30
        done
        $success || { echo "repo sync failed after 3 attempts"; exit 1; }

    - name: Get Kernel Version Info
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        for f in "${CONFIG_FILES[@]}"; do
          if [ -f "$f" ]; then
            l=$(grep '^[[:space:]]*BRANCH=' "$f" || true)
            if [ -n "$l" ]; then BRANCH_LINE="$l"; break; fi
          fi
        done
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found"; exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Could not parse android version from BRANCH=$BRANCH_VALUE"
          exit 1
        fi
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        cd "$ARTIFACTS_DIR"
        echo "$ANDROID_VERSION-$FULL_VERSION" > "${OP_MODEL}.txt"
        echo "ANDROID_VER=$ANDROID_VERSION" >> "$GITHUB_ENV"
        echo "KERNEL_VER=$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"
        echo "KERNEL_FULL_VER=$ANDROID_VERSION-$FULL_VERSION" >> "$GITHUB_ENV"
        echo "SUSFS_KERNEL_BRANCH=gki-$ANDROID_VERSION-$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        SUSFS_BRANCH="${{ env.SUSFS_KERNEL_BRANCH }}"
        
        echo "Using AnyKernel3 branch: $ANYKERNEL_BRANCH"
        echo "Using SUSFS branch: $SUSFS_BRANCH"
        git clone --depth=1 https://github.com/Numbersf/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        cd susfs4ksu
        SUSFS_COMMIT_SHA=$(git rev-parse HEAD)
        echo "SUSFS_COMMIT_SHA=$SUSFS_COMMIT_SHA" >> $GITHUB_ENV

    - name: Download SUSFS Module
      shell: bash
      run: |
        set -euo pipefail
        echo "Downloading SUSFS module..."
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        
        # Get latest release from ksu_module_susfs
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/sidex15/ksu_module_susfs/releases/latest)
        MODULE_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith(".zip")) | .browser_download_url' | head -n1)
        MODULE_NAME=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith(".zip")) | .name' | head -n1)
        
        if [ -z "$MODULE_URL" ] || [ "$MODULE_URL" = "null" ]; then
          echo "Warning: Could not find SUSFS module release, trying direct download..."
          MODULE_URL="https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs.zip"
          MODULE_NAME="ksu_module_susfs.zip"
        fi
        
        echo "Downloading SUSFS module from: $MODULE_URL"
        curl -L -o "$MODULE_NAME" "$MODULE_URL"
        
        if [ -f "$MODULE_NAME" ]; then
          echo "SUSFS module downloaded successfully: $MODULE_NAME"
          ls -lh "$MODULE_NAME"
        else
          echo "Warning: SUSFS module download may have failed"
        fi

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || true
        rm -f msm-kernel/android/abi_gki_protected_exports_* || true
        df -h

    - name: Add BBG (LSM)
      if: ${{ inputs.lsm == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        echo "Adding BBG..."
        wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash
        echo "CONFIG_BBG=y" >> common/arch/arm64/configs/gki_defconfig
        sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' common/security/Kconfig

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"

        META="${{ inputs.ksu_meta }}"
        if [[ "$(grep -o '/' <<< "$META" | wc -l)" -lt 2 ]]; then
          echo "Error: ksu_meta parameter missing required '/' separators"
          echo "Format should be: branch/custom_tag/commit_hash"
          exit 10
        fi

        IFS='/' read -r BRANCH_NAME CUSTOM_TAG MANUAL_HASH <<< "$META"

        echo "Branch: $BRANCH_NAME"
        [[ -n "$CUSTOM_TAG" ]] && echo "Custom tag: $CUSTOM_TAG" || echo "Custom tag: Not set"
        [[ -n "$MANUAL_HASH" ]] && echo "Manual hash: $MANUAL_HASH" || echo "Manual hash: Not set"

        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd ./KernelSU

        if [[ -n "$MANUAL_HASH" ]]; then
          git fetch origin "$BRANCH_NAME" --depth=50
          git checkout "$MANUAL_HASH"
          SHORT_HASH=${MANUAL_HASH:0:8}
        fi

        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
          grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV

        GIT_HASH=$(git rev-parse --short HEAD)
        echo "GIT_HASH=$GIT_HASH"

        if [[ -n "$MANUAL_HASH" ]]; then
          USE_HASH="$SHORT_HASH"
        else
          USE_HASH="$GIT_HASH"
        fi
        if [[ -z "$CUSTOM_TAG" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$USE_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$USE_HASH]"
        fi

        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile

        VERSION_DEFINITIONS=$(cat <<EOF
        define get_ksu_version_full
        $VERSION_FULL
        endef

        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        EOF
        )

        awk -v def="$VERSION_DEFINITIONS" '
          /REPO_OWNER :=/ {print; print def; inserted=1; next}
          1
          END {if (!inserted) print def}
        ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "SUKISUVER=$KSU_VERSION" >> $GITHUB_ENV

        echo "::group::Final Makefile version info"
        grep -A10 "REPO_OWNER" kernel/Makefile
        grep "KSU_VERSION_FULL" kernel/Makefile
        echo "::endgroup::"

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        echo "Applying SUSFS patches..."
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_${{ env.SUSFS_KERNEL_BRANCH }}.patch ./common/
        cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

        cd ./common
        susfs_version=$(grep '#define SUSFS_VERSION' ./include/linux/susfs.h | awk -F'"' '{print $2}')
        echo "SUSVER=$susfs_version" >> $GITHUB_ENV

        GKI_V="${{ env.ANDROID_VER }}-${{ env.KERNEL_VER }}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')

        if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Fixing legacy 5.15 issues..."
          curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch
        fi

        fake_patched=0
        if [ "$GKI_V" = "android15-6.6" ]; then
          if ! grep -qxF $'\tunsigned int nr_subpages = __PAGE_SIZE / PAGE_SIZE;' ./fs/proc/task_mmu.c; then
            echo "Applying fake patch for android15-6.6"
            sed -i -e '/int ret = 0, copied = 0;/a \\tunsigned int nr_subpages \= __PAGE_SIZE \/ PAGE_SIZE;' -e '/int ret = 0, copied = 0;/a \\tpagemap_entry_t \*res = NULL;' ./fs/proc/task_mmu.c
            fake_patched=1
          fi
        fi
        if [ "$GKI_V" = "android12-5.10" ] || [ "$GKI_V" = "android13-5.15" ]; then
          if ! grep -qxF $'\tif (!vma_pages(vma))' ./fs/proc/task_mmu.c; then
            echo "Applying fake patch for $GKI_V"
            fake_patched=1
          fi
        fi

        echo "Applying SUSFS patch..."
        patch -p1 < 50_add_susfs_in_${{ env.SUSFS_KERNEL_BRANCH }}.patch || true

        if [ "$fake_patched" = 1 ]; then
          if [ "$GKI_V" = "android15-6.6" ]; then
            if grep -qxF $'\tunsigned int nr_subpages = __PAGE_SIZE / PAGE_SIZE;' ./fs/proc/task_mmu.c; then
              sed -i -e '/unsigned int nr_subpages \= __PAGE_SIZE \/ PAGE_SIZE;/d' -e '/pagemap_entry_t \*res = NULL;/d' ./fs/proc/task_mmu.c
            fi
          fi
          if [ "$GKI_V" = "android12-5.10" ] || [ "$GKI_V" = "android13-5.15" ]; then
            if grep -qxF $'\t\tgoto show_pad;' ./fs/proc/task_mmu.c; then
              sed -i -e 's/goto show_pad;/return 0;/' ./fs/proc/task_mmu.c
            fi
          fi
        fi

        KERNEL_VERSION="${{ env.KERNEL_VER }}"
        MIN_VERSION="5.16"
        if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
          echo "Patching ptrace for kernel < 5.16"
          wget -O gki_ptrace.patch https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/gki_ptrace.patch
          patch -p1 -F 3 < gki_ptrace.patch || true
        fi

        if [ "$OP_HMBIRD" = true ]; then
          echo "Patching HMBIRD..."
          echo 'obj-y += hmbird_patch.o' >> ./drivers/Makefile
          wget -O hmbird_kernel_patch.patch https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_kernel_patch.patch
          patch -p1 -F 3 < hmbird_kernel_patch.patch
          cd ./kernel/sched
          rm -rf ext.c ext.h build_policy.c slim.h slim_sysctl.c
          wget -O hmbird_files_patch.patch https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_files_patch.patch
          patch -p1 -F 3 < hmbird_files_patch.patch
        fi

    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        cp ../../SukiSU_patch/69_hide_stuff.patch ./
        echo "Applying hide stuff patch..."
        patch -p1 -F 3 < 69_hide_stuff.patch

    - name: Apply Convert HMBIRD_OGKI to HMBIRD_GKI (for 6.6 kernels)
      if: ${{ env.KERNEL_VER == '6.6' }}
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
        wget https://github.com/Numbersf/Action-Build/raw/SukiSU-Ultra/patches/hmbird_patch.patch
        echo "Applying OGKI to GKI conversion patch for 6.6..."
        patch -p1 -F 3 < hmbird_patch.patch

    - name: Apply SCHED_EXT (for 6.6 kernels)
      if: ${{ env.KERNEL_VER == '6.6' }}
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        echo "Applying SCHED_EXT for kernel 6.6..."
        git clone https://github.com/HanKuCha/sched_ext.git
        cp -r ./sched_ext/* ./kernel/sched
        rm -rf ./sched_ext/.git

    - name: Apply HOOK
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        HOOK="${{ inputs.hook }}"
        if [ "$HOOK" = "kprobe" ]; then
          echo "Using kprobe hooks"
        elif [ "$HOOK" = "manual" ]; then
          cp ../../SukiSU_patch/hooks/scope_min_manual_hooks_v1.5.patch ./
          echo "Applying manual hooks"
          patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch
        elif [ "$HOOK" = "tracepoint" ]; then
          cp ../../SukiSU_patch/hooks/sukisu_tracepoint_hooks_v1.1.patch ./
          echo "Applying tracepoint hooks"
          patch -p1 -F 3 < sukisu_tracepoint_hooks_v1.1.patch
        fi

    - name: Apply ZRAM
      if: ${{ inputs.enable_zram == 'true' }}
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
        cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
        cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
        cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./lib/
        cp ../../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VER }}/lz4kd.patch ./
        echo "Applying lz4kd patch..."
        patch -p1 -F 3 < lz4kd.patch || true
        cp ../../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VER }}/lz4k_oplus.patch ./
        echo "Applying lz4k_oplus patch..."
        patch -p1 -F 3 < lz4k_oplus.patch || true

    - name: Add Configuration Settings
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig

        echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
        echo "CONFIG_KPM=y" >> "$CONFIG_FILE"

        HOOK="${{ inputs.hook }}"
        if [ "$HOOK" = "kprobe" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
        elif [ "$HOOK" = "manual" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
        elif [ "$HOOK" = "tracepoint" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE"
        fi

        echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_MAP=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"

        echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

        echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
        echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"

        echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"

        if [ "${{ inputs.enable_zram }}" = "true" ]; then
          echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
        fi

        if [ "${{ inputs.lsm }}" = "true" ]; then
          echo "CONFIG_BBG=y" >> "$CONFIG_FILE"
        fi
        
        # Enable SCHED_EXT for 6.6 kernels
        if [ "${{ env.KERNEL_VER }}" = "6.6" ]; then
          echo "CONFIG_SCHED_CLASS_EXT=y" >> "$CONFIG_FILE"
        fi

        sed -i 's/check_defconfig//' ./common/build.config.gki

    - name: Customize Kernel Branding
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        cd "$KERNEL_PATH/common"
        mkdir -p out
        CUSTOM_LOCALVERSION="-${ANDROID_VER}-OP-SukiSU"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

    - name: Detect Clang (toolchain for build)
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          [ -d "$base/clang/host/linux-x86" ] || continue
          latest=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 || true)
          if [ -n "$latest" ] && [ -x "$latest/bin/clang" ]; then
            CLANG_BIN="$latest/bin"
            CLANG_FOUND=true
          fi
        done
        if ! $CLANG_FOUND && command -v clang >/dev/null 2>&1; then
          CLANG_BIN="$(dirname "$(command -v clang)")"
          CLANG_FOUND=true
          echo "Using system clang."
        fi
        $CLANG_FOUND || { echo "No clang toolchain found"; exit 1; }
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
        CLANG_VERSION="$("$CLANG_BIN/clang" --version | head -n1)"
        echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
        echo "Detected Clang: $CLANG_VERSION"

    - name: Build Kernel
      shell: bash
      env:
        PYTHONWARNINGS: "ignore:invalid escape sequence"
      run: |
        set -euo pipefail
        echo "::group::Build kernel"
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        cd "$COMMON"
        : > "$COMMON/.scmversion"
        
        export PYTHONWARNINGS="${PYTHONWARNINGS}"
        
        if [ -n "${CLANG_BIN_PATH:-}" ] && [ -x "${CLANG_BIN_PATH}/clang" ]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
        fi
        export LLVM=1 LLVM_IAS=1
        export ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CC=clang
        OUT=out
        mkdir -p "$OUT"
        make O="$OUT" gki_defconfig
        
        if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
          scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
          sed -i 's/scm_version="$(scm_version --short)"/scm_version=""/' scripts/setlocalversion
        fi
        
        if [ "${{ inputs.optimize_level }}" = "O3" ]; then
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O3"
        else
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O2"
        fi
        
        KCFLAGS="-Wno-error -pipe -fno-stack-protector ${KCFLAGS_EXTRA}"
        KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        
        make O="$OUT" olddefconfig
        
        echo "Starting build with $(nproc --all) threads..."
        set -o pipefail
        make -j"$(nproc --all)" O="$OUT" KCFLAGS="$KCFLAGS" KCPPFLAGS="$KCPPFLAGS" 2>&1 | tee build.log
        
        IMG="$OUT/arch/arm64/boot/Image"
        if [ ! -f "$IMG" ]; then
          echo "Kernel Image missing"
          exit 1
        fi
        sha256sum "$IMG" | tee "$OUT/Image.sha256"
        echo "::endgroup::"

    - name: Save Build Metadata
      id: save_metadata
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        cd "$ARTIFACTS_DIR"
        echo "kernel_version=${{ env.KERNEL_FULL_VER }}" >> "$GITHUB_OUTPUT"
        echo "sukisu_version=${SUKISUVER:-unknown}" >> "$GITHUB_OUTPUT"
        echo "susfs_version=${SUSVER:-unknown}" >> "$GITHUB_OUTPUT"

    - name: Collect Build Stats / Validate Image
      id: collect_stats
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        OUT="$COMMON/out"
        IMG="$OUT/arch/arm64/boot/Image"
        WARNINGS_COUNT=$(grep -i -E 'warning:' "$COMMON/build.log" | wc -l || true)
        echo "$WARNINGS_COUNT" > "$OUT/warnings.txt"
        file "$IMG" > "$OUT/Image.file"
        KERNEL_UNAME=$(strings "$IMG" | grep -E 'Linux version.*#' | tail -n1)
        echo "Kernel Uname: $KERNEL_UNAME"
        echo "KERNEL_UNAME=$KERNEL_UNAME" >> "$GITHUB_ENV"
        if ! file "$IMG" | grep -qi 'ARM64'; then
          echo "Image does not appear to be ARM64:"
          file "$IMG"
          exit 1
        fi
        MIN_SIZE=$((6*1024*1024))
        ACTUAL_SIZE=$(stat -c %s "$IMG")
        if [ "$ACTUAL_SIZE" -lt "$MIN_SIZE" ]; then
          echo "Image size $ACTUAL_SIZE < $MIN_SIZE (suspicious)"; exit 1
        fi
        IMAGE_SHA256=$(cut -d' ' -f1 "$OUT/Image.sha256")
        echo "Image sha256: $IMAGE_SHA256"
        echo "warnings_count=$WARNINGS_COUNT" >> "$GITHUB_OUTPUT"
        echo "image_sha256=$IMAGE_SHA256" >> "$GITHUB_OUTPUT"

    - name: Create Kernel ZIP
      id: create_zip
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        IMAGE_PATH="$CONFIG_DIR/kernel_platform/common/out/arch/arm64/boot/Image"
        if [ ! -f "$IMAGE_PATH" ]; then
          echo "ERROR: Built Image not found"
          exit 1
        fi
    
        cp "$IMAGE_PATH" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        
        ZIP_NAME="AnyKernel3_${OP_MODEL}_${{ env.KERNEL_FULL_VER }}_SukiSU_${SUKISUVER}_${SUSVER}.zip"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
    
        echo "Creating flashable zip: $ZIP_NAME"
        ( cd "$GITHUB_WORKSPACE/AnyKernel3" && zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./* >/dev/null )
    
        find "$ARTIFACTS_DIR" -maxdepth 1 -type f ! -name "$ZIP_NAME" ! -name "${OP_MODEL}.txt" -delete
    
        echo "zip_name=$ZIP_NAME" >> "$GITHUB_OUTPUT"

    - name: Final Build Summary
      shell: bash
      run: |
        set -euo pipefail
        SCHED_STATUS="No"
        [[ "${{ env.KERNEL_VER }}" == "6.6" ]] && SCHED_STATUS="Yes (auto for 6.6)"
        
        {
          echo "Model: ${OP_MODEL}"
          echo "Android: ${{ env.ANDROID_VER }}"
          echo "Kernel base: ${{ env.KERNEL_VER }}"
          echo "Kernel full: ${{ env.KERNEL_FULL_VER }}"
          echo "Kernel Uname: ${{ env.KERNEL_UNAME }}"
          echo "SukiSU Version: ${SUKISUVER:-unknown}"
          echo "SUSFS Version: ${SUSVER:-unknown}"
          echo "SUSFS commit SHA: ${{ env.SUSFS_COMMIT_SHA }}"
          echo "Hook Type: ${{ inputs.hook }}"
          echo "LSM Enabled: ${{ inputs.lsm }}"
          echo "ZRAM Enabled: ${{ inputs.enable_zram }}"
          echo "SCHED_EXT Enabled: $SCHED_STATUS"
          echo "Optimization: ${{ inputs.optimize_level }}"
          echo "Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
          echo "Compiler: ${CLANG_VERSION:-unknown}"
          echo "Warnings Count: ${{ steps.collect_stats.outputs.warnings_count }}"
        } | tee summary.txt
        {
          echo "### Kernel Build Summary"
          echo ""
          echo "- Model: ${OP_MODEL}"
          echo "- Android: ${{ env.ANDROID_VER }}"
          echo "- Kernel Version: ${{ steps.save_metadata.outputs.kernel_version }}"
          echo "- Kernel Uname: ${{ env.KERNEL_UNAME }}"
          echo "- SukiSU Version: ${SUKISUVER:-unknown}"
          echo "- SUSFS Version: ${SUSVER:-unknown}"
          echo "- SUSFS commit SHA: [${{ env.SUSFS_COMMIT_SHA }}](https://gitlab.com/simonpunk/susfs4ksu/-/commit/${{ env.SUSFS_COMMIT_SHA }})"
          echo "- Hook Type: ${{ inputs.hook }}"
          echo "- LSM Enabled: ${{ inputs.lsm }}"
          echo "- ZRAM Enabled: ${{ inputs.enable_zram }}"
          echo "- SCHED_EXT Enabled: $SCHED_STATUS"
          echo "- Optimization: ${{ inputs.optimize_level }}"
          echo "- Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
          echo "- Warnings Count: ${{ steps.collect_stats.outputs.warnings_count }}"
        } >> "$GITHUB_STEP_SUMMARY"

    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: ${{ env.CONFIG }}/artifacts/
